# ==============================================================================
#           Code_Aster Command File Generator for N-Layer LPBF
# ==============================================================================
#
# This script generates a .comm file for a multi-layer thermomechanical
# simulation by expanding a proven 2-layer template.
#
# It does NOT use loops inside the .comm file. Instead, it "unrolls" the
# loop by copy-pasting and modifying commands for each layer.
#
# --- HOW TO USE ---
# 1. Set the parameters in the "USER-DEFINED PARAMETERS" section below.
# 2. Run the script: python generate_comm.py
# 3. Use the generated file 'lpbf_n_layer.comm' in your Code_Aster study.
#
# --- IMPORTANT ---
# This script faithfully reproduces the logic of the provided 2-layer code.
# If run with num_layers = 2, it will generate a functionally identical file.
# The only differences will be variable names and identifier numbers, which
# are generated sequentially for clarity and to prevent errors.
#
# ==============================================================================

# ------------------------------------------------------------------------------
# USER-DEFINED PARAMETERS
# ------------------------------------------------------------------------------

# Total number of layers to simulate
num_layers = 2

# Output filename for the generated command file
output_filename = "lpbf_n_layer.comm"

# --- Process Parameters (must match your simulation) ---
time_per_layer = 0.003  # Duration for one layer (s)
height_per_layer = 0.1  # Height of one layer (mm)
initial_temp = 300.0    # Initial temperature of the model (K)
preheat_temp = 373.0    # Temperature for newly activated layers (K)

# --- Output Units ---
# The original code used a non-sequential pattern (80, 2, 8, 5).
# For N-layers, we use a predictable pattern to avoid conflicts.
# Base units for thermal and mechanical results. The layer number (minus 1)
# will be added to these.
# Example for layer 3: thermal unit=82, mechanical unit=3
base_ther_unit = 80
base_meca_unit = 2

# ------------------------------------------------------------------------------

def generate_comm_file():
    """Main function to generate the .comm file."""
    
    # Use a list to build the file content as strings
    comm_file_content = []
    
    # Counter for unique Code_Aster identifiers
    id_counter = 1

    def add_line(text):
        """Helper to add a line to the content list."""
        comm_file_content.append(text)

    def get_id():
        """Helper to get a unique identifier string."""
        nonlocal id_counter
        id_str = f"identifier='{id_counter}:1',"
        id_counter += 1
        return id_str

    # ==========================================================================
    # 1. Preamble and One-Time Definitions
    # ==========================================================================
    add_line("DEBUT(LANG='FR')\n")
    add_line(f"mesh = LIRE_MAILLAGE({get_id()} FORMAT='MED', UNITE=7)\n")

    # --- Material Properties (copied exactly from the original) ---
    add_line("# --- Material and Function Definitions ---")
    add_line(f"kappa1 = DEFI_FONCTION({get_id()} NOM_PARA='TEMP', PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT', VALE=(430.0, 5.957, 1270.0, 17.0, 1383.0, 19.87, 1799.0, 21.9, 1801.0, 28.8, 2666.0, 42.2))")
    add_line(f"rhocp1 = DEFI_FONCTION({get_id()} NOM_PARA='TEMP', PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT', VALE=(293.0, 2.435, 873.0, 2.958, 1799.0, 3.149, 1801.0, 4.616, 2073.0, 4.532, 2573.0, 4.278))")
    add_line(f"youngmo1 = DEFI_FONCTION({get_id()} NOM_PARA='TEMP', PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT', VALE=(300.0, 107000.0, 600.0, 99000.0, 800.0, 90000.0, 1000.0, 80000.0, 1200.0, 70000.0))")
    add_line(f"poiss1 = DEFI_FONCTION({get_id()} NOM_PARA='TEMP', PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT', VALE=(300.0, 0.32, 600.0, 0.31, 800.0, 0.3, 1000.0, 0.29, 1200.0, 0.28))")
    add_line(f"rho1 = DEFI_FONCTION({get_id()} NOM_PARA='TEMP', PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT', VALE=(293.0, 4.15e-06, 973.0, 4.35e-06, 1799.0, 4.15e-06, 1801.0, 4.1e-06, 2073.0, 4e-06, 2573.0, 3.8e-06))")
    add_line(f"alpha1 = DEFI_FONCTION({get_id()} NOM_PARA='TEMP', PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT', VALE=(300.0, 8.9e-06, 600.0, 9.2e-06, 800.0, 9.5e-06, 1000.0, 9.8e-06, 1200.0, 1e-05))")
    add_line(f"mater1 = DEFI_MATERIAU({get_id()} ECRO_LINE=_F(D_SIGM_EPSI=3000.0, EPSI_LIM=0.01, SY=950.0), ELAS_FO=_F(ALPHA=alpha1, E=youngmo1, NU=poiss1, RHO=rho1, TEMP_DEF_ALPHA=300.0), THER_NL=_F(LAMBDA=kappa1, RHO_CP=rhocp1))\n")

    # ==========================================================================
    # 2. Loop to Generate Commands for Each Layer
    # ==========================================================================
    for i in range(1, num_layers + 1):
        add_line(f"\n# --- Layer {i} --- #\n")
        
        # --- Dynamic variable names ---
        active_groups_list = [f"'layer{j}'" for j in range(1, i + 1)]
        active_groups_str = f"({', '.join(active_groups_list)}, )"

        model_ther = f"model{i}"
        model_meca = f"modmeca{i}"
        mat_ther_assign = f"assth{i}"
        list_inst = f"listr{i}"
        flux_formula = f"fluxform{i}"
        flux_load = f"flux{i}"
        bottemp_load = f"bottemp{i}"
        fixmec_load = f"fixmec{i}"
        res_ther = f"resther{i}"
        mat_meca_assign = f"assmec{i}"
        res_meca = f"resmec{i}"
        stress = f"stress{i}"

        # --- Variables from previous step (i-1) ---
        prev_res_ther = f"resther{i-1}"
        prev_res_meca = f"resmec{i-1}"
        prev_list_inst = f"listr{i-1}"

        # --- Time and geometry for current layer ---
        time_start = (i - 1) * time_per_layer
        time_end = i * time_per_layer
        z_height = i * height_per_layer

        # --- AFFE_MODELE and AFFE_MATERIAU ---
        add_line(f"{model_ther} = AFFE_MODELE({get_id()} MAILLAGE=mesh, AFFE=_F(GROUP_MA={active_groups_str}, PHENOMENE='THERMIQUE', MODELISATION='3D'))")
        add_line(f"{model_meca} = AFFE_MODELE({get_id()} MAILLAGE=mesh, AFFE=_F(GROUP_MA={active_groups_str}, PHENOMENE='MECANIQUE', MODELISATION='3D'))")
        add_line(f"{mat_ther_assign} = AFFE_MATERIAU({get_id()} MAILLAGE=mesh, AFFE=_F(GROUP_MA={active_groups_str}, MATER=mater1))\n")

        # --- Time list and Flux formula ---
        add_line(f"{list_inst} = DEFI_LIST_REEL({get_id()} DEBUT={time_start}, INTERVALLE=_F(JUSQU_A={time_end}, PAS=1e-5))")
        flux_vale = f"'77.4768*(10**5) * exp( - ( (X - 1000*(INST - {time_start}))**2 / 0.05 + (Y - 0.05)**2 / 0.03 + (Z - {z_height})**2 / 0.01 ) )'"
        add_line(f"{flux_formula} = FORMULE({get_id()} NOM_PARA=('X', 'Y', 'Z', 'INST'), VALE={flux_vale})\n")

        # --- Loads ---
        add_line(f"{bottemp_load} = AFFE_CHAR_THER({get_id()} MODELE={model_ther}, TEMP_IMPO=_F(GROUP_MA=('bottom', ), TEMP={initial_temp}))")
        add_line(f"{flux_load} = AFFE_CHAR_THER_F({get_id()} MODELE={model_ther}, SOURCE=_F(GROUP_MA=('layer{i}', ), SOUR={flux_formula}))")
        add_line(f"{fixmec_load} = AFFE_CHAR_MECA({get_id()} MODELE={model_meca}, DDL_IMPO=_F(BLOCAGE=('DEPLACEMENT', ), GROUP_MA=('bottom', )))\n")

        # --- Prepare ETAT_INIT for layers > 1 ---
        if i > 1:
            add_line(f"# --- State Transfer from Layer {i-1} to Layer {i} ---")
            # Mechanical state transfer
            field_depl_new = f"field{i}1"
            field_depl_ext = f"field{i}2"
            field_depl_init = f"field{i}3"
            add_line(f"{field_depl_new} = CREA_CHAMP({get_id()} MAILLAGE=mesh, OPERATION='AFFE', TYPE_CHAM='NOEU_DEPL_R', AFFE=_F(GROUP_MA=('layer{i}', ), NOM_CMP=('DX', 'DY', 'DZ'), VALE=(0.0, 0.0, 0.0)))")
            add_line(f"{field_depl_ext} = CREA_CHAMP({get_id()} OPERATION='EXTR', TYPE_CHAM='NOEU_DEPL_R', RESULTAT={prev_res_meca}, INST={time_start}, NOM_CHAM='DEPL')")
            prev_active_groups_list = [f"'layer{j}'" for j in range(1, i)]
            prev_active_groups_str = f"({', '.join(prev_active_groups_list)}, )"
            add_line(f"{field_depl_init} = CREA_CHAMP({get_id()} MAILLAGE=mesh, OPERATION='ASSE', TYPE_CHAM='NOEU_DEPL_R', ASSE=(_F(CHAM_GD={field_depl_new}, GROUP_MA=('layer{i}', )), _F(CHAM_GD={field_depl_ext}, GROUP_MA={prev_active_groups_str})))")
            
            # Thermal state transfer
            tmpi = f"tmpi{i-1}"
            tmpext = f"tmpext{i-1}"
            tmpini = f"tmpini{i-1}"
            add_line(f"{tmpi} = CREA_CHAMP({get_id()} MAILLAGE=mesh, OPERATION='AFFE', TYPE_CHAM='NOEU_TEMP_R', AFFE=_F(GROUP_MA=('layer{i}', ), NOM_CMP=('TEMP', ), VALE=({preheat_temp}, )))")
            add_line(f"{tmpext} = CREA_CHAMP({get_id()} OPERATION='EXTR', TYPE_CHAM='NOEU_TEMP_R', RESULTAT={prev_res_ther}, INST={time_start}, NOM_CHAM='TEMP')")
            add_line(f"{tmpini} = CREA_CHAMP({get_id()} MAILLAGE=mesh, OPERATION='ASSE', TYPE_CHAM='NOEU_TEMP_R', ASSE=(_F(CHAM_GD={tmpi}, GROUP_MA=('layer{i}', )), _F(CHAM_GD={tmpext}, GROUP_MA={prev_active_groups_str})))")
            add_line(f"# --- End State Transfer --- \n")

            # Set ETAT_INIT strings for the solver calls
            etat_init_ther_str = f"ETAT_INIT=_F(CHAM_NO={tmpini}),"
            evol_ther_sech_str = f"EVOL_THER_SECH={prev_res_ther},"
            etat_init_meca_str = f"ETAT_INIT=_F(DEPL={field_depl_init}),"

        else: # Layer 1
            etat_init_ther_str = f"ETAT_INIT=_F(VALE={initial_temp}),"
            evol_ther_sech_str = ""
            etat_init_meca_str = ""

        # --- THER_NON_LINE ---
        add_line(f"""{res_ther} = THER_NON_LINE({get_id()}
                         MODELE={model_ther},
                         CHAM_MATER={mat_ther_assign},
                         {evol_ther_sech_str}
                         {etat_init_ther_str}
                         EXCIT=(_F(CHARGE={bottemp_load}),
                                _F(CHARGE={flux_load})),
                         INCREMENT=_F(LIST_INST={list_inst}),
                         CONVERGENCE=_F(ITER_GLOB_MAXI=50, RESI_GLOB_RELA=0.0001),
                         NEWTON=_F(REAC_ITER=1),
                         RECH_LINEAIRE=_F(ITER_LINE_MAXI=50),
                         SOLVEUR=_F(MATR_DISTRIBUEE='OUI', METHODE='MUMPS'))\n""")

        # --- STAT_NON_LINE ---
        add_line(f"""{mat_meca_assign} = AFFE_MATERIAU({get_id()}
                         MAILLAGE=mesh,
                         MODELE={model_meca},
                         AFFE=_F(GROUP_MA={active_groups_str}, MATER=(mater1, )),
                         AFFE_VARC=_F(EVOL={res_ther}, NOM_VARC='TEMP', PROL_DROITE='CONSTANT', PROL_GAUCHE='CONSTANT', VALE_REF=300.0))\n""")

        add_line(f"""{res_meca} = STAT_NON_LINE({get_id()}
                        MODELE={model_meca},
                        CHAM_MATER={mat_meca_assign},
                        {etat_init_meca_str}
                        EXCIT=_F(CHARGE={fixmec_load}),
                        COMPORTEMENT=_F(DEFORMATION='PETIT', RELATION='VMIS_ISOT_LINE', TOUT='OUI'),
                        CONVERGENCE=_F(ITER_GLOB_MAXI=50, RESI_GLOB_RELA=0.0001),
                        INCREMENT=_F(LIST_INST={list_inst}),
                        NEWTON=_F(REAC_ITER=3),
                        RECH_LINEAIRE=_F(ITER_LINE_MAXI=50),
                        SOLVEUR=_F(MATR_DISTRIBUEE='OUI', METHODE='MUMPS'))\n""")

        # --- CALC_CHAMP and IMPR_RESU ---
        add_line(f"{stress} = CALC_CHAMP({get_id()} RESULTAT={res_meca}, CONTRAINTE=('SIGM_NOEU', ), CRITERES=('SIEQ_NOEU', ))\n")
        
        # Note: The original code used strange units (80, 2, 8, 5). 
        # Here we generate sequential units to support N layers.
        # This is a required change for generalization.
        ther_unit = base_ther_unit if i==1 else base_ther_unit - 72 # Replicates 80 -> 8 pattern
        meca_unit = base_meca_unit if i==1 else base_meca_unit + 3  # Replicates 2 -> 5 pattern
        
        # To make it fully general, we will use a simple incremental scheme
        ther_unit_gen = base_ther_unit + i - 1
        meca_unit_gen = base_meca_unit + i - 1
        
        add_line(f"IMPR_RESU({get_id()} UNITE={ther_unit_gen}, RESU=_F(RESULTAT={res_ther}, TOUT_CHAM='OUI'))")
        add_line(f"IMPR_RESU({get_id()} UNITE={meca_unit_gen}, RESU=(_F(RESULTAT={res_meca}, NOM_CHAM=('DEPL',)), _F(RESULTAT={stress}, TOUT_CHAM='OUI')))")


    # ==========================================================================
    # 3. Finalization
    # ==========================================================================
    add_line("\nFIN()")

    # --- Write the collected content to the output file ---
    with open(output_filename, 'w') as f:
        for line in comm_file_content:
            f.write(line + '\n')
    
    print(f"Successfully generated command file: {output_filename}")


# --- Main execution block ---
if __name__ == "__main__":
    generate_comm_file()
