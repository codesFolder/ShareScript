# ==================================================================
# USER-DEFINED PARAMETERS
# ==================================================================
# Total number of layers to simulate
nb_layers = 2  # Change this to how many layers you have (e.g., 2, 20, 50)

# Time and geometry parameters
time_per_layer = 0.003   # Duration of the build process for a single layer (s)
height_per_layer = 0.1   # Height of a single layer (mm)

# Initial and pre-heat temperatures (K)
T_initial = 300.0
T_preheat = 373.0 # Temperature assigned to new, inactive elements

# Base output file units. We will add the layer number to these.
base_unit_ther = 80
base_unit_meca = 90
# ==================================================================


DEBUT(identifier='0:1', LANG='FR')

mesh = LIRE_MAILLAGE(identifier='1:1', FORMAT='MED', UNITE=7)

# --- Material Properties and Functions (Defined once) ---
kappa1 = DEFI_FONCTION(identifier='6:1',
                       NOM_PARA='TEMP',
                       PROL_DROITE='CONSTANT',
                       PROL_GAUCHE='CONSTANT',
                       VALE=(430.0, 5.957, 1270.0, 17.0, 1383.0, 19.87, 1799.0, 21.9, 1801.0, 28.8, 2666.0, 42.2))

rhocp1 = DEFI_FONCTION(identifier='7:1',
                       NOM_PARA='TEMP',
                       PROL_DROITE='CONSTANT',
                       PROL_GAUCHE='CONSTANT',
                       VALE=(293.0, 2.435, 873.0, 2.958, 1799.0, 3.149, 1801.0, 4.616, 2073.0, 4.532, 2573.0, 4.278))

youngmo1 = DEFI_FONCTION(identifier='8:1',
                         NOM_PARA='TEMP',
                         PROL_DROITE='CONSTANT',
                         PROL_GAUCHE='CONSTANT',
                         VALE=(300.0, 107000.0, 600.0, 99000.0, 800.0, 90000.0, 1000.0, 80000.0, 1200.0, 70000.0))

poiss1 = DEFI_FONCTION(identifier='9:1',
                       NOM_PARA='TEMP',
                       PROL_DROITE='CONSTANT',
                       PROL_GAUCHE='CONSTANT',
                       VALE=(300.0, 0.32, 600.0, 0.31, 800.0, 0.3, 1000.0, 0.29, 1200.0, 0.28))

rho1 = DEFI_FONCTION(identifier='10:1',
                     NOM_PARA='TEMP',
                     PROL_DROITE='CONSTANT',
                     PROL_GAUCHE='CONSTANT',
                     VALE=(293.0, 4.15e-06, 973.0, 4.35e-06, 1799.0, 4.15e-06, 1801.0, 4.1e-06, 2073.0, 4e-06, 2573.0, 3.8e-06))

alpha1 = DEFI_FONCTION(identifier='11:1',
                       NOM_PARA='TEMP',
                       PROL_DROITE='CONSTANT',
                       PROL_GAUCHE='CONSTANT',
                       VALE=(300.0, 8.9e-06, 600.0, 9.2e-06, 800.0, 9.5e-06, 1000.0, 9.8e-06, 1200.0, 1e-05))

mater1 = DEFI_MATERIAU(identifier='12:1',
                       ECRO_LINE=_F(D_SIGM_EPSI=3000.0,
                                    EPSI_LIM=0.01,
                                    SY=950.0),
                       ELAS_FO=_F(ALPHA=alpha1,
                                  E=youngmo1,
                                  NU=poiss1,
                                  RHO=rho1,
                                  TEMP_DEF_ALPHA=300.0),
                       THER_NL=_F(LAMBDA=kappa1,
                                  RHO_CP=rhocp1))


# --- Initialization before the loop ---
active_groups = []
res_ther_prev = None
res_meca_prev = None


# ==================================================================
# THE MAIN LOOP FOR N-LAYERS
# ==================================================================
for i in range(1, nb_layers + 1):
    
    print(f"================== Starting Layer {i} ==================")
    
    # --- Define names and parameters for the current layer ---
    current_layer_name = f'layer{i}'
    active_groups.append(current_layer_name)
    
    time_start = (i - 1) * time_per_layer
    time_end = i * time_per_layer
    current_z_height = i * height_per_layer

    # --- Define models for the currently active groups ---
    model_ther = AFFE_MODELE(MAILLAGE=mesh,
                             AFFE=_F(GROUP_MA=active_groups, PHENOMENE='THERMIQUE', MODELISATION='3D'))
    model_meca = AFFE_MODELE(MAILLAGE=mesh,
                             AFFE=_F(GROUP_MA=active_groups, PHENOMENE='MECANIQUE', MODELISATION='3D'))

    # --- Define time list and heat flux for the current layer ---
    list_inst = DEFI_LIST_REEL(DEBUT=time_start,
                               INTERVALLE=_F(JUSQU_A=time_end, NOMBRE=2))

    flux_formula = FORMULE(NOM_PARA=('X', 'Y', 'Z', 'INST'),
                           VALE=f'77.4768e5 * exp( - ( (X - 1000*(INST-{time_start}))**2 / 0.05 + (Y - 0.05)**2 / 0.03 + (Z - {current_z_height})**2 / 0.01 ) )')

    # --- Define thermal and mechanical loads ---
    char_ther_flux = AFFE_CHAR_THER_F(MODELE=model_ther,
                                      SOURCE=_F(GROUP_MA=(current_layer_name,), SOUR=flux_formula))
    char_ther_temp = AFFE_CHAR_THER(MODELE=model_ther,
                                    TEMP_IMPO=_F(GROUP_MA=('bottom',), TEMP=T_initial))
    char_meca_fix = AFFE_CHAR_MECA(MODELE=model_meca,
                                   DDL_IMPO=_F(GROUP_MA=('bottom',), BLOCAGE='DEPLACEMENT'))

    # --- Define material assignments ---
    mat_ther = AFFE_MATERIAU(MAILLAGE=mesh, MODELE=model_ther, AFFE=_F(GROUP_MA=active_groups, MATER=mater1))

    # --- State transfer: Prepare initial conditions for this step ---
    if i == 1:
        etat_init_ther = _F(VALE=T_initial)
        etat_init_meca = None
    else:
        temp_prev = CREA_CHAMP(OPERATION='EXTR', RESULTAT=res_ther_prev, NOM_CHAM='TEMP', INST=time_start,
                               TYPE_CHAM='NOEU_TEMP_R')
        temp_new_layer = CREA_CHAMP(OPERATION='AFFE', MAILLAGE=mesh, TYPE_CHAM='NOEU_TEMP_R',
                                    AFFE=_F(GROUP_MA=(current_layer_name,), NOM_CMP='TEMP', VALE=T_preheat))
        etat_init_ther_field = CREA_CHAMP(OPERATION='ASSE', MAILLAGE=mesh, TYPE_CHAM='NOEU_TEMP_R',
                                          ASSE=(_F(CHAM_GD=temp_prev, GROUP_MA=active_groups[:-1]),
                                                _F(CHAM_GD=temp_new_layer, GROUP_MA=(current_layer_name,))))
        etat_init_ther = _F(CHAM_NO=etat_init_ther_field)

        depl_prev = CREA_CHAMP(OPERATION='EXTR', RESULTAT=res_meca_prev, NOM_CHAM='DEPL', INST=time_start,
                               TYPE_CHAM='NOEU_DEPL_R')
        depl_new_layer = CREA_CHAMP(OPERATION='AFFE', MAILLAGE=mesh, TYPE_CHAM='NOEU_DEPL_R',
                                    AFFE=_F(GROUP_MA=(current_layer_name,), NOM_CMP=('DX','DY','DZ'), VALE=(0.0, 0.0, 0.0)))
        etat_init_meca_field = CREA_CHAMP(OPERATION='ASSE', MAILLAGE=mesh, TYPE_CHAM='NOEU_DEPL_R',
                                          ASSE=(_F(CHAM_GD=depl_prev, GROUP_MA=active_groups[:-1]),
                                                _F(CHAM_GD=depl_new_layer, GROUP_MA=(current_layer_name,))))
        etat_init_meca = _F(DEPL=etat_init_meca_field)

    # --- Thermal Analysis for the current layer ---
    res_ther_curr = THER_NON_LINE(CHAM_MATER=mat_ther,
                                  MODELE=model_ther,
                                  ETAT_INIT=etat_init_ther,
                                  EXCIT=(_F(CHARGE=char_ther_temp), _F(CHARGE=char_ther_flux)),
                                  INCREMENT=_F(LIST_INST=list_inst),
                                  CONVERGENCE=_F(RESI_GLOB_RELA=1e-4, ITER_GLOB_MAXI=50),
                                  NEWTON=_F(REAC_ITER=1),
                                  RECH_LINEAIRE=_F(ITER_LINE_MAXI=50),
                                  SOLVEUR=_F(METHODE='MUMPS', MATR_DISTRIBUEE='OUI'))

    # --- Mechanical Analysis for the current layer ---
    mat_meca = AFFE_MATERIAU(MAILLAGE=mesh, MODELE=model_meca,
                             AFFE=_F(GROUP_MA=active_groups, MATER=mater1),
                             AFFE_VARC=_F(EVOL=res_ther_curr, NOM_VARC='TEMP', VALE_REF=300.0,
                                          PROL_GAUCHE='CONSTANT', PROL_DROITE='CONSTANT'))

    res_meca_curr = STAT_NON_LINE(CHAM_MATER=mat_meca,
                                  MODELE=model_meca,
                                  ETAT_INIT=etat_init_meca,
                                  EXCIT=(_F(CHARGE=char_meca_fix),),
                                  COMPORTEMENT=_F(DEFORMATION='PETIT', RELATION='VMIS_ISOT_LINE', TOUT='OUI'),
                                  INCREMENT=_F(LIST_INST=list_inst),
                                  CONVERGENCE=_F(RESI_GLOB_RELA=1e-4, ITER_GLOB_MAXI=50),
                                  NEWTON=_F(REAC_ITER=3),
                                  RECH_LINEAIRE=_F(ITER_LINE_MAXI=50),
                                  SOLVEUR=_F(METHODE='MUMPS', MATR_DISTRIBUEE='OUI'))

    # --- Calculate Stress ---
    stress_curr = CALC_CHAMP(RESULTAT=res_meca_curr,
                             CONTRAINTE=('SIGM_NOEU',),
                             CRITERES=('SIEQ_NOEU',))

    # --- Print results for this layer to a UNIQUE file ---
    unit_ther_current_layer = base_unit_ther + i
    unit_meca_current_layer = base_unit_meca + i
    
    IMPR_RESU(UNITE=unit_ther_current_layer,
              RESU=_F(RESULTAT=res_ther_curr)) # <-- CORRECTED
              
    IMPR_RESU(UNITE=unit_meca_current_layer,
              RESU=(_F(RESULTAT=res_meca_curr),
                    _F(RESULTAT=stress_curr)))

    # --- Update state for the next iteration ---
    res_ther_prev = res_ther_curr
    res_meca_prev = res_meca_curr


# ==================================================================
# END OF LOOP
# ==================================================================

FIN()

# MESH unit 7
# thermal unit 81, 82, ...
# mech unit 91, 92, ...
