# =============================================================================
#  SALOME SCRIPT: Import and Layer Geometry (FINALIZED)
#  - Imports an STL or BREP file.
#  - Partitions ONLY the geometry from Z=0 to the model's max height.
#  - Includes a definite cut at the Z=0 plane.
#  - Creates a volume group for each layer named 'layer1', 'layer2', etc.
# =============================================================================

# Please run this using File > Load Script... in Salome.

import sys
import salome
salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()

import GEOM
from salome.geom import geomBuilder
import math

# --- 1. CONFIGURATION ---
# Please edit these three variables

# The full path to your geometry file. Use forward slashes '/'.
GEOMETRY_FILE_PATH = "C:/Users/DELL/Downloads/v2024/salome_meca/Box_1.brep"

# The type of your geometry file. Supported values: "STL", "BREP", "STEP".
FILE_TYPE = "BREP"

# The desired number of layers/divisions TO CREATE ABOVE Z=0.
NUMBER_OF_DIVISIONS = 10


# --- MAIN SCRIPT ---

# Wrap the entire workflow in a try/except block for clear error messages
try:
    print("--- Starting script ---")
    geompy = geomBuilder.New()

    # =========================================================================
    # --- 2. IMPORT GEOMETRY BASED ON FILE TYPE ---
    # =========================================================================
    print(f"Importing {FILE_TYPE} file: {GEOMETRY_FILE_PATH}")
    
    part_solid = None
    
    if FILE_TYPE.upper() == "STL":
        imported_stl = geompy.ImportSTL(GEOMETRY_FILE_PATH, False)
        shell = geompy.MakeShell([imported_stl])
        solid = geompy.MakeSolid([shell])
        solid = geompy.RemoveInternalFaces(solid)
        part_solid = geompy.RemoveExtraEdges(solid)
        print("STL successfully converted to a healed solid.")
    elif FILE_TYPE.upper() in ["BREP", "STEP"]:
        part_solid = geompy.ImportBREP(GEOMETRY_FILE_PATH)
        print("BREP/STEP file successfully imported.")
    else:
        raise ValueError(f"Unsupported FILE_TYPE: '{FILE_TYPE}'. Please use 'STL', 'BREP', or 'STEP'.")

    if part_solid is None:
        raise RuntimeError(f"Failed to create a valid solid from the file.")
    
    geompy.addToStudy(part_solid, 'original_imported_solid')
    
    # =========================================================================
    # --- 3. PARTITION THE SOLID FROM Z=0 UPWARDS ---
    # =========================================================================
    bbox = geompy.BoundingBox(part_solid)
    part_z_max = bbox[5]

    # CRITICAL CHECK: Ensure the model actually extends above Z=0
    if part_z_max <= 0:
        raise RuntimeError(f"Model does not extend above Z=0 (max Z is {part_z_max}). No layers can be created.")

    # NEW LOGIC: The height to be partitioned is from 0 to the top of the model.
    partitioning_height = part_z_max
    layer_thickness = partitioning_height / NUMBER_OF_DIVISIONS
    
    print(f"Partitioning height (from Z=0 to Z_max): {partitioning_height:.3f} mm")
    print(f"Dividing into {NUMBER_OF_DIVISIONS} layers of thickness {layer_thickness:.3f} mm...")

    # --- Create cutting planes ---
    print("Creating cutting planes...")
    
    dx = bbox[3] - bbox[0]
    dy = bbox[4] - bbox[1]
    max_dimension = max(dx, dy)
    plane_size = max_dimension * 10
    print(f"Calculated dynamic plane size: {plane_size:.2f}")
    
    plane_proto = geompy.MakePlaneLCS(None, plane_size, plane_size)

    cutting_tools = []
    
    # CRITICAL: Add a plane exactly at Z=0 to separate negative/positive geometry.
    plane_at_zero = geompy.MakeTranslation(plane_proto, 0, 0, 0)
    cutting_tools.append(plane_at_zero)
    
    # Add the other planes for the layers above Z=0
    for i in range(1, NUMBER_OF_DIVISIONS):
        # NEW LOGIC: Plane positions are calculated from Z=0, not from z_min.
        z_pos = i * layer_thickness
        plane = geompy.MakeTranslation(plane_proto, 0, 0, z_pos)
        cutting_tools.append(plane)
        
    if cutting_tools:
        all_planes_compound = geompy.MakeCompound(cutting_tools)
        geompy.addToStudy(all_planes_compound, 'Cutting_Planes')
        print("Added 'Cutting_Planes' object to the study, including plane at Z=0.")

    # Perform the partition
    Partition_1 = geompy.MakePartition([part_solid], cutting_tools, [], [], geompy.ShapeType["SOLID"], 0, [], 0)
    
    if Partition_1 is None:
        raise RuntimeError("Partition operation failed.")

    geompy.addToStudy(Partition_1, 'Partition_1')
    print("Partition complete.")

    # =========================================================================
    # --- 4. CREATE VOLUME GROUPS FOR EACH LAYER ---
    # =========================================================================
    print("Creating volume groups for each layer...")
    
    all_solids_in_partition = geompy.SubShapeAll(Partition_1, geompy.ShapeType["SOLID"])
    
    # NEW: Filter to get only the solids that are actually above Z=0.
    solids_above_zero = []
    for solid in all_solids_in_partition:
        center_z = geompy.PointCoordinates(geompy.MakeCDG(solid))[2]
        if center_z > -1e-9: # Use a small tolerance for floating point precision
            solids_above_zero.append(solid)
            
    if not solids_above_zero:
        raise RuntimeError("Partition resulted in zero solid bodies above Z=0.")
    
    # Sort only the valid layers by their Z-position
    sorted_layers = sorted(
        solids_above_zero,
        key=lambda s: geompy.PointCoordinates(geompy.MakeCDG(s))[2]
    )

    for i, layer_shape in enumerate(sorted_layers):
        group_name = f"layer{i + 1}"
        layer_group = geompy.CreateGroup(Partition_1, geompy.ShapeType["SOLID"])
        sub_shape_id = geompy.GetSubShapeID(Partition_1, layer_shape)
        geompy.UnionIDs(layer_group, [sub_shape_id])
        geompy.addToStudyInFather(Partition_1, layer_group, group_name)
        
        print(f"Created group: {group_name}")
    
    print("\nAll tasks completed successfully.")

except Exception as e:
    print("\n--- SCRIPT FAILED ---")
    import traceback
    traceback.print_exc()

finally:
    if salome.sg.hasDesktop():
        salome.sg.updateObjBrowser()
    print("--- Script finished execution ---")
