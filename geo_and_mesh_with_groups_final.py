# =============================================================================
#  UNIVERSAL SALOME SCRIPT GENERATOR (FINAL, WORKING VERSION)
#  This script WRITES another Python script that performs the full workflow.
# =============================================================================
import os

# --- 1. CHOOSE GEOMETRY SOURCE ---
GEOMETRY_TYPE = 'IMPORT'  # Options: 'IMPORT', 'BOX'

# --- 2. CONFIGURE THE CHOSEN SOURCE ---
# Used if GEOMETRY_TYPE is 'IMPORT' (STL, STEP/STP, BREP)
INPUT_FILE_PATH = "C:/Users/DELL/Downloads/v2024/salome_meca/lpbf_run/cut1.stl"

# Used if GEOMETRY_TYPE is 'BOX'
BOX_LENGTH = 100.0
BOX_WIDTH = 100.0
BOX_HEIGHT = 20.0

# --- 3. CONFIGURE THE PARTITIONING & MESHING ---
NUMBER_OF_DIVISIONS = 4
MESH_MAX_SIZE = 10.0
MESH_MIN_SIZE = 0.0
MESH_SIZE_FACTOR = 3.0

# --- 4. OUTPUT FILE ---
OUTPUT_FILENAME = "salome_workflow_final.py"

# --- MAIN SCRIPT (No need to edit below this line) ---

def generate_script():
    """Generates the full, simplified, and corrected Salome script."""
    print("--- Salome Universal Workflow Script Generator (Final Working Version) ---")
    
    # --- Generate geometry creation code ---
    geom_creation_code = ""
    if GEOMETRY_TYPE == 'IMPORT':
        file_path_for_salome = INPUT_FILE_PATH.replace('\\', '/')
        file_ext = os.path.splitext(INPUT_FILE_PATH)[1].lower()
        if file_ext == '.stl':
            geom_creation_code = f'initial_solid = geompy.UnionFaces(geompy.RemoveExtraEdges(geompy.RemoveInternalFaces(geompy.MakeSolid([geompy.MakeShell([geompy.ImportSTL(r"{file_path_for_salome}")])])), False))'
        elif file_ext in ['.step', '.stp']:
            geom_creation_code = f'initial_solid = geompy.MakeSolidFromCompound(geompy.MakeCompound(geompy.ImportSTEP(r"{file_path_for_salome}")))'
        elif file_ext == '.brep':
            geom_creation_code = f'initial_solid = geompy.ImportBREP(r"{file_path_for_salome}")'
        else:
            print(f"ERROR: Unsupported file type '{file_ext}'.")
            return
    elif GEOMETRY_TYPE == 'BOX':
        geom_creation_code = f'initial_solid = geompy.MakeBoxDXDYDZ({BOX_LENGTH}, {BOX_WIDTH}, {BOX_HEIGHT})'
    else:
        print(f"ERROR: Invalid GEOMETRY_TYPE '{GEOMETRY_TYPE}'.")
        return

    # --- Assemble the final script ---
    script_content = f"""#!/usr/bin/env python
# Generated by a universal script generator.
# This script performs the full workflow: Geom -> Groups -> Mesh

import sys
import salome
salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()

###
### GEOM component
###
import GEOM
from salome.geom import geomBuilder
geompy = geomBuilder.New()

print("--- Starting GEOM component ---")

# 1. Create initial geometry
print("Creating initial solid...")
{geom_creation_code}
geompy.addToStudy(initial_solid, 'initial_solid')

# 2. Partition the geometry
print("Partitioning solid into {NUMBER_OF_DIVISIONS} layers...")
b_box = geompy.BoundingBox(initial_solid)
z_min, z_max = b_box[2], b_box[5]
layer_thickness = (z_max - z_min) / {NUMBER_OF_DIVISIONS}
cutting_tools = []
for i in range(1, {NUMBER_OF_DIVISIONS}):
    plane = geompy.MakePlaneLCS(None, 2000, 1)
    translated_plane = geompy.MakeTranslation(plane, 0, 0, z_min + (i * layer_thickness))
    cutting_tools.append(translated_plane)

Partition_1 = geompy.MakePartition([initial_solid], cutting_tools, [], [], geompy.ShapeType["SOLID"], 0, [], 0)
geompy.addToStudy(Partition_1, 'Partition_1')
print("Partition complete.")

# 3. Create GEOM groups
print("--- Creating GEOM groups ---")
all_faces_in_part = geompy.SubShapeAll(Partition_1, geompy.ShapeType["FACE"])
bottom_face_ids = [geompy.GetSubShapeID(Partition_1, face) for face in all_faces_in_part if abs(geompy.PointCoordinates(geompy.MakeCDG(face))[2] - z_min) < 1e-5]
bottom_surface_group = geompy.CreateGroup(Partition_1, geompy.ShapeType["FACE"])
geompy.UnionIDs(bottom_surface_group, bottom_face_ids)
geompy.addToStudy(bottom_surface_group, "bottom_surface")
print("Created GEOM group 'bottom_surface'")

all_solids_in_part = geompy.SubShapeAll(Partition_1, geompy.ShapeType["SOLID"])
layers_with_z = sorted([(geompy.PointCoordinates(geompy.MakeCDG(s))[2], s) for s in all_solids_in_part])
volume_geom_groups = []
for i, (z, shape) in enumerate(layers_with_z):
    group_name = f"layer_{{i + 1}}"
    layer_group = geompy.CreateGroup(Partition_1, geompy.ShapeType["SOLID"])
    geompy.UnionIDs(layer_group, [geompy.GetSubShapeID(Partition_1, shape)])
    geompy.addToStudy(layer_group, group_name)
    volume_geom_groups.append(layer_group)
    print(f"Created GEOM group: {{group_name}}")

###
### SMESH component
###
print("\\n--- Starting SMESH component ---")
import SMESH
from salome.smesh import smeshBuilder
smesh = smeshBuilder.New()

# 1. Create Mesh and define parameters
Mesh_1 = smesh.Mesh(Partition_1)
GMSH_algo = Mesh_1.Tetrahedron(algo=smeshBuilder.GMSH)
Gmsh_Params = GMSH_algo.Parameters()
Gmsh_Params.SetMaxSize({MESH_MAX_SIZE})
Gmsh_Params.SetMinSize({MESH_MIN_SIZE})
Gmsh_Params.SetSizeFactor({MESH_SIZE_FACTOR})

# 2. Create Mesh Groups from GEOM Groups
print("Creating mesh groups...")
Mesh_1.GroupOnGeom(bottom_surface_group, 'bottom_surface', SMESH.FACE)
print("  - Created mesh group 'bottom_surface'")
for i, geom_group in enumerate(volume_geom_groups):
    group_name = f"layer_{{i + 1}}"
    Mesh_1.GroupOnGeom(geom_group, group_name, SMESH.VOLUME)
    print(f"  - Created mesh group '{{group_name}}'")

# 3. Compute the Mesh
print("Computing the mesh...")
isDone = Mesh_1.Compute()
if isDone:
    # CORRECTION: The proper function is NbVolumes() for 3D elements.
    print(f"Mesh computed successfully with {{Mesh_1.NbVolumes()}} volumes (3D elements).")
else:
    print("ERROR: Mesh computation failed.")

# --- Finalize ---
if salome.sg.hasDesktop():
    salome.sg.updateObjBrowser()

print("\\nFull workflow script finished execution.")
"""
    # Write the final script to a file
    try:
        with open(OUTPUT_FILENAME, "w") as f:
            f.write(script_content)
        print(f"\nSUCCESS: Created the Salome script file named '{OUTPUT_FILENAME}'")
    except Exception as e:
        print(f"\nERROR: Could not write to file. {e}")

# --- Run the generator function ---
if __name__ == "__main__":
    generate_script()
