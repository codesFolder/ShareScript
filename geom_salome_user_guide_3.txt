GEOM_TestOthers.py
import os

import GEOM
import tempfile
def TestExportImport (geompy, shape):
  print("Test Export/Import ...", end=' ')
  with tempfile.TemporaryDirectory() as tmpDir:
    # Files for Export/Import testing
    fileExportImportBREP = os.path.join(tmpDir, "testExportImportBREP.brep")
    fileExportImportIGES = os.path.join(tmpDir, "testExportImportIGES.iges")
    fileExportImportSTEP = os.path.join(tmpDir, "testExportImportSTEP.step")
    # ExportBREP, ExportIGES, ExportSTEP
    geompy.ExportBREP(shape, fileExportImportBREP)
    geompy.ExportIGES(shape, fileExportImportIGES)
    geompy.ExportSTEP(shape, fileExportImportSTEP)
    # ImportBREP, ImportIGES, ImportSTEP
    ImportBREP = geompy.ImportBREP(fileExportImportBREP)
    ImportIGES = geompy.ImportIGES(fileExportImportIGES)
    ImportSTEP = geompy.ImportSTEP(fileExportImportSTEP)
    geompy.addToStudy(ImportBREP, "ImportBREP")
    geompy.addToStudy(ImportIGES, "ImportIGES")
    geompy.addToStudy(ImportSTEP, "ImportSTEP")
    # GetIGESUnit and GetSTEPUnit
    if geompy.GetIGESUnit(fileExportImportIGES) != "M":
      ImportIGES_scaled = geompy.ImportIGES(fileExportImportIGES, True)
      geompy.addToStudy(ImportIGES_scaled, "ImportIGES_scaled")
      pass
    if geompy.GetSTEPUnit(fileExportImportSTEP) != "M":
      ImportSTEP_scaled = geompy.ImportSTEP(fileExportImportSTEP, True)
      geompy.addToStudy(ImportSTEP_scaled, "ImportSTEP_scaled")
      pass
    pass
  # Test RestoreShape from binary BRep stream
  aStream = shape.GetShapeStream()
  aNewShape = geompy.RestoreShape(aStream)
  geompy.addToStudy(aNewShape, "aNewShape")
  print("OK")
def TestOtherOperations (geompy, math):
  # prepare data for further operations
  vx = geompy.MakeVectorDXDYDZ( 1,  0,  0)
  vy = geompy.MakeVectorDXDYDZ( 0,  1,  0)
  vz = geompy.MakeVectorDXDYDZ( 0,  0,  1)
  v_y = geompy.MakeVectorDXDYDZ( 0, -1,  0)
  p11 = geompy.MakeVertex( 0,  0, 0)
  p12 = geompy.MakeVertex(30,  0, 0)
  p13 = geompy.MakeVertex(30, 30, 0)
  p14 = geompy.MakeVertex( 0, 30, 0)
  p21 = geompy.MakeVertex(10, 10, 0)
  p22 = geompy.MakeVertex(20, 10, 0)
  p23 = geompy.MakeVertex(20, 20, 0)
  p24 = geompy.MakeVertex(10, 20, 0)
  e11 = geompy.MakeEdge(p11, p12)
  e12 = geompy.MakeEdge(p12, p13)
  e13 = geompy.MakeEdge(p13, p14)
  e14 = geompy.MakeEdge(p14, p11)
  e21 = geompy.MakeEdge(p21, p22)
  e22 = geompy.MakeEdge(p22, p23)
  e23 = geompy.MakeEdge(p23, p24)
  e24 = geompy.MakeEdge(p24, p21)
  w1 = geompy.MakeWire([e11, e12, e13, e14])
  w2 = geompy.MakeWire([e21, e22, e23, e24])
  w3 = geompy.MakeTranslation(w2, 0, 0, 10)
  id_w1 = geompy.addToStudy(w1, "Outside Wire")
  id_w2 = geompy.addToStudy(w2, "Inside Wire")
  id_w3 = geompy.addToStudy(w3, "Inside Wire, translated along OZ")

  # MakeFaces
  f12 = geompy.MakeFaces([w1, w2], 0)
  id_f12 = geompy.addToStudy(f12, "MakeFaces WO + WI")
  # Export/Import
  TestExportImport(geompy, f12)

  # OrientationChange
  Box = geompy.MakeBoxDXDYDZ(200, 200, 200)
  geompy.addToStudy(Box, "Box")
  Orientation = geompy.OrientationChange(Box)
  id_Orientation = geompy.addToStudy(Orientation, "OrientationChange")

  # MakeCommon, MakeCut, MakeFuse, MakeSection
  p1 = geompy.MakeVertex(60, 120, 0)
  p2 = geompy.MakeVertex( 0,  0, 0)
  v = geompy.MakeVector(p1, p2)
  height = 90
  radius1 = 50
  cylinder = geompy.MakeCylinder(p1, v, radius1, height)
  Sphere = geompy.MakeSphereR(100)
  Common1 = geompy.MakeCommon    (Box, Sphere)
  Cut1    = geompy.MakeCut       (Box, Sphere)
  Fuse1   = geompy.MakeFuse      (Box, Sphere)
  Section = geompy.MakeSection   (Box, Sphere)
  Common2 = geompy.MakeCommonList([Box, Sphere, cylinder])
  Cut2    = geompy.MakeCutList   (Box, [Sphere, cylinder])
  Fuse2   = geompy.MakeFuseList  ([Box, Sphere, cylinder])
  id_Common1 = geompy.addToStudy(Common1,  "Common_1")
  id_Cut1    = geompy.addToStudy(Cut1,     "Cut_1")
  id_Fuse1   = geompy.addToStudy(Fuse1,    "Fuse_1")
  id_Section = geompy.addToStudy(Section, "Section")
  id_Common2 = geompy.addToStudy(Common2,  "Common_2")
  id_Cut2    = geompy.addToStudy(Cut2,     "Cut_2")
  id_Fuse2   = geompy.addToStudy(Fuse2,    "Fuse_2")

  # Partition
  p100 = geompy.MakeVertex(100, 100, 100)
  p300 = geompy.MakeVertex(300, 300, 300)
  Box1 = geompy.MakeBoxTwoPnt(p100, p300)
  Partition = geompy.Partition([Box], [Box1])
  id_Partition = geompy.addToStudy(Partition, "Partition of Box by Box1")

  # MakeMultiRotation1D, MakeMultiRotation2D
  pz = geompy.MakeVertex(0, 0, 100)
  vy = geompy.MakeVectorDXDYDZ(0, 100, 0)
  MultiRot1Dt = geompy.MakeMultiRotation1DNbTimes(f12, vy, pz, 6)
  MultiRot1Ds = geompy.MakeMultiRotation1DByStep(f12, vy, pz, math.pi/5., 6)
  MultiRot2Dt = geompy.MakeMultiRotation2DNbTimes(f12, vy, pz, 5, 30, 3)
  MultiRot2Ds = geompy.MakeMultiRotation2DByStep(f12, vy, pz, math.pi/4., 6, 30, 3)
  geompy.addToStudy(MultiRot1Dt, "MakeMultiRotation1DNbTimes")
  geompy.addToStudy(MultiRot1Ds, "MakeMultiRotation1DByStep")
  geompy.addToStudy(MultiRot2Dt, "MakeMultiRotation2DNbTimes")
  id_MultiRot2D = geompy.addToStudy(MultiRot2Ds, "MakeMultiRotation2DByStep")

  # MakeFilletAll
  radius_fillet = 10.
  face5 = geompy.SubShapeSortedCentres(Box, geompy.ShapeType["FACE"], [5])
  f_glob_id = geompy.GetSubShapeID(Box, face5)
  SuppFace = geompy.SuppressFaces(Box, [f_glob_id])
  MakeFilletAll = geompy.MakeFilletAll(SuppFace, radius_fillet)
  id_MakeFilletAll = geompy.addToStudy(MakeFilletAll, "MakeFilletAll")

  # MakeChamferAll
  dimension_chamfer = 10.
  MakeChamferAll = geompy.MakeChamferAll(SuppFace, dimension_chamfer)
  id_MakeChamferAll = geompy.addToStudy(MakeChamferAll, "MakeChamferAll")

  # MakeChamfer
  d1 = 13.
  d2 = 7.
  box_faces = geompy.SubShapeAllSortedCentres(Box, geompy.ShapeType["FACE"])
  f_ind_1 = geompy.GetSubShapeID(Box, box_faces[0])
  f_ind_2 = geompy.GetSubShapeID(Box, box_faces[1])
  f_ind_3 = geompy.GetSubShapeID(Box, box_faces[2])
  MakeChamfer = geompy.MakeChamfer(Box, d1, d2, geompy.ShapeType["FACE"],
                                   [f_ind_1, f_ind_2, f_ind_3])
  id_MakeChamfer = geompy.addToStudy(MakeChamfer, "MakeChamfer")

  # NumberOf
  NumberOfFaces = geompy.NumberOfFaces(Box)
  NumberOfEdges = geompy.NumberOfEdges(Box)
  NumberOfSolids = geompy.NumberOfSolids(Box)
  NumberOfShapes = geompy.NumberOfSubShapes(Box, geompy.ShapeType["SHAPE"])
  assert (NumberOfFaces  ==  6), "Bad number of faces in BOX!"
  assert (NumberOfEdges  == 12), "Bad number of edges in BOX!"
  assert (NumberOfSolids ==  1), "Bad number of solids in BOX!"
  assert (NumberOfShapes == 34), "Bad number of shapes in BOX!"

  # MakeBlockExplode
  Compound = geompy.MakeCompound([Box, Sphere])
  MakeBlockExplode = geompy.MakeBlockExplode(Compound, 6, 6)
  id_MakeBlockExplode = geompy.addToStudy(MakeBlockExplode[0], "MakeBlockExplode")

  # CheckCompoundOfBlocks
  p1 = geompy.MakeVertex(200, 0, 0)
  p2 = geompy.MakeVertex(400, 200, 200)
  p3 = geompy.MakeVertex(400, 50, 50)
  p4 = geompy.MakeVertex(600, 250, 250)
  Box2 = geompy.MakeBoxTwoPnt(p1, p2)
  Box3 = geompy.MakeBoxTwoPnt(p3, p4)
  Cyl  = geompy.MakeCylinderRH(50, 300)
  Cone = geompy.MakeConeR1R2H(150, 10, 400)
  Compound1 = geompy.MakeCompound([Box, Cyl, Cone, Box3, Box2], "Compound1")
  print("Printing errors of not valid Blocks Compound (EXPECTED):")
  IsValid = geompy.CheckCompoundOfBlocks(Compound1)
  # This Blocks Compound is NOT VALID
  assert (not IsValid)
  (NonBlocks, NonQuads) = geompy.GetNonBlocks(Compound1)
  if NonBlocks is not None:
    geompy.addToStudyInFather(Compound1, NonBlocks, "Group of non-hexahedral solids")
  if NonQuads is not None:
    geompy.addToStudyInFather(Compound1, NonQuads, "Group of non-quadrangular faces")
  IsValid = geompy.CheckCompoundOfBlocks(Box)
  assert (IsValid) # Box is a VALID Blocks Compound

  # GetSame
  Cone_ss = geompy.GetSame(Compound1, Cone)
  id_Cone_ss = geompy.addToStudyInFather(Compound1, Cone_ss, "Cone subshape")

  # test geometrical groups
  # CreateGroup
  CreateGroup = geompy.CreateGroup(Box, geompy.ShapeType["FACE"])
  id_CreateGroup = geompy.addToStudy(CreateGroup, "CreateGroup")

  # AddObject
  f_ind_4 = geompy.GetSubShapeID(Box, box_faces[3])
  f_ind_5 = geompy.GetSubShapeID(Box, box_faces[4])
  f_ind_6 = geompy.GetSubShapeID(Box, box_faces[5])
  geompy.AddObject(CreateGroup, f_ind_6) # box_faces[5]
  geompy.AddObject(CreateGroup, f_ind_1) # box_faces[0]
  geompy.AddObject(CreateGroup, f_ind_4) # box_faces[3]
  # Now contains f_ind_6, f_ind_1, f_ind_4

  # UnionList
  geompy.UnionList(CreateGroup, [box_faces[2], box_faces[4], box_faces[5]])
  # Now contains f_ind_6, f_ind_1, f_ind_4, f_ind_3, f_ind_5

  # RemoveObject(theGroup, theSubShapeID)
  geompy.RemoveObject(CreateGroup, f_ind_1) # box_faces[0]
  # Now contains f_ind_6, f_ind_4, f_ind_3, f_ind_5

  # DifferenceList
  geompy.DifferenceList(CreateGroup, [box_faces[1], box_faces[0], box_faces[3]])
  # Now contains f_ind_6, f_ind_3, f_ind_5

  # GetObjectIDs
  GetObjectIDs = geompy.GetObjectIDs(CreateGroup)
  assert (sorted(GetObjectIDs) == sorted([f_ind_6, f_ind_3, f_ind_5]))

  # GetMainShape
  BoxCopy = geompy.GetMainShape(CreateGroup)

  # DifferenceIDs
  geompy.DifferenceIDs(CreateGroup, [f_ind_3, f_ind_5])
  # Now contains f_ind_6

  # UnionIDs
  geompy.UnionIDs(CreateGroup, [f_ind_1, f_ind_2, f_ind_6])
  # Now contains f_ind_6, f_ind_1, f_ind_2
  # Check
  GetObjectIDs = geompy.GetObjectIDs(CreateGroup)
  assert (sorted(GetObjectIDs) == sorted([f_ind_6, f_ind_1, f_ind_2]))

  # Boolean Operations on Groups (Union, Intersection, Cut)
  Group_1 = geompy.CreateGroup(Box, geompy.ShapeType["FACE"])
  geompy.UnionIDs(Group_1, [13, 23])
  Group_2 = geompy.CreateGroup(Box, geompy.ShapeType["FACE"])
  geompy.UnionIDs(Group_2, [3, 27])
  Group_3 = geompy.CreateGroup(Box, geompy.ShapeType["FACE"])
  geompy.UnionIDs(Group_3, [33, 23])
  Group_4 = geompy.CreateGroup(Box, geompy.ShapeType["FACE"])
  geompy.UnionIDs(Group_4, [31, 27])
  geompy.addToStudyInFather(Box, Group_1, 'Group_1')
  geompy.addToStudyInFather(Box, Group_2, 'Group_2')
  geompy.addToStudyInFather(Box, Group_3, 'Group_3')
  geompy.addToStudyInFather(Box, Group_4, 'Group_4')
  # union groups
  Group_U_1_2 = geompy.UnionGroups(Group_1, Group_2)
  Group_UL_3_4 = geompy.UnionListOfGroups([Group_3, Group_4])
  geompy.addToStudyInFather(Box, Group_U_1_2, 'Group_U_1_2')
  geompy.addToStudyInFather(Box, Group_UL_3_4, 'Group_UL_3_4')
  # intersect groups
  Group_I_1_3 = geompy.IntersectGroups(Group_1, Group_3)
  Group_IL_1_3 = geompy.IntersectListOfGroups([Group_1, Group_3])
  geompy.addToStudyInFather(Box, Group_I_1_3, 'Group_I_1_3')
  geompy.addToStudyInFather(Box, Group_IL_1_3, 'Group_IL_1_3')
  # cut groups
  Group_C_2_4 = geompy.CutGroups(Group_2, Group_4)
  Group_CL_2_4 = geompy.CutListOfGroups([Group_2], [Group_4])
  geompy.addToStudyInFather(Box, Group_C_2_4, 'Group_C_2_4')
  geompy.addToStudyInFather(Box, Group_CL_2_4, 'Group_CL_2_4')

  GroupType = geompy.GetType(CreateGroup)
  assert (GroupType == geompy.ShapeType["FACE"])
  # Example of sphere partitioning into hexahedral blocks
  p0 = geompy.MakeVertex(0, 0, 0)
  b0 = geompy.MakeBox(-50, -50, -50, 50, 50, 50)
  s0 = geompy.MakeSphereR(100)
  id_b0 = geompy.addToStudy(b0, "b0")
  id_s0 = geompy.addToStudy(s0, "s0")
  v_0pp = geompy.MakeVectorDXDYDZ( 0,  1,  1)
  v_0np = geompy.MakeVectorDXDYDZ( 0, -1,  1)
  v_p0p = geompy.MakeVectorDXDYDZ( 1,  0,  1)
  v_p0n = geompy.MakeVectorDXDYDZ( 1,  0, -1)
  v_pp0 = geompy.MakeVectorDXDYDZ( 1,  1,  0)
  v_pn0 = geompy.MakeVectorDXDYDZ( 1, -1,  0)
  pln_0pp = geompy.MakePlane(p0, v_0pp, 300)
  pln_0np = geompy.MakePlane(p0, v_0np, 300)
  pln_p0p = geompy.MakePlane(p0, v_p0p, 300)
  pln_p0n = geompy.MakePlane(p0, v_p0n, 300)
  pln_pp0 = geompy.MakePlane(p0, v_pp0, 300)
  pln_pn0 = geompy.MakePlane(p0, v_pn0, 300)
  part_objs = [b0, pln_0pp, pln_0np, pln_p0p, pln_p0n, pln_pp0, pln_pn0]
  part_tool_1 = geompy.MakePartition(part_objs, KeepNonlimitShapes=1)
  geompy.addToStudy(part_tool_1, "part_tool_1")
  pt_pnt_1  = geompy.MakeVertex( 55,   0,  55)
  pt_pnt_2  = geompy.MakeVertex(  0,  55,  55)
  pt_pnt_3  = geompy.MakeVertex(-55,   0,  55)
  pt_pnt_4  = geompy.MakeVertex(  0, -55,  55)
  pt_pnt_5  = geompy.MakeVertex( 55,  55,   0)
  pt_pnt_6  = geompy.MakeVertex( 55, -55,   0)
  pt_pnt_7  = geompy.MakeVertex(-55,  55,   0)
  pt_pnt_8  = geompy.MakeVertex(-55, -55,   0)
  pt_pnt_9  = geompy.MakeVertex( 55,   0, -55)
  pt_pnt_10 = geompy.MakeVertex(  0,  55, -55)
  pt_pnt_11 = geompy.MakeVertex(-55,   0, -55)
  pt_pnt_12 = geompy.MakeVertex(  0, -55, -55)
  pt_face_1  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_1)
  pt_face_2  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_2)
  pt_face_3  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_3)
  pt_face_4  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_4)
  pt_face_5  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_5)
  pt_face_6  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_6)
  pt_face_7  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_7)
  pt_face_8  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_8)
  pt_face_9  = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_9)
  pt_face_10 = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_10)
  pt_face_11 = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_11)
  pt_face_12 = geompy.GetFaceNearPoint(part_tool_1, pt_pnt_12)
  part_tools = [pt_face_1, pt_face_4, pt_face_7, pt_face_10,
                pt_face_2, pt_face_5, pt_face_8, pt_face_11,
                pt_face_3, pt_face_6, pt_face_9, pt_face_12, b0]
  part_tool = geompy.MakeCompound(part_tools)
  geompy.addToStudy(part_tool, "part_tool")
  part = geompy.MakePartition([s0], [part_tool])
  geompy.addToStudy(part, "part")
  # GetFreeFacesIDs
  anIDs = geompy.GetFreeFacesIDs(part)
  freeFaces = geompy.GetSubShape(part, anIDs)
  geompy.addToStudy(freeFaces, "freeFaces")
  # Example of hexahedral sphere creation
  # (spherical surface of solid is made of six quasi-quadrangular faces)
  tools = [pln_pp0, pln_pn0, pln_p0p, pln_p0n]
  Partition_1 = geompy.MakePartition([Sphere], tools, [], [], geompy.ShapeType["SOLID"], 0, [])
  geompy.addToStudy(Partition_1, "Partition_1")
  faces = geompy.SubShapeAllSortedCentres(Partition_1, geompy.ShapeType["FACE"])
  Face_1 = faces[0]
  Face_2 = faces[39]
  Face_3 = faces[40]
  geompy.addToStudyInFather(Partition_1, Face_1, "Face_1")
  geompy.addToStudyInFather(Partition_1, Face_2, "Face_2")
  geompy.addToStudyInFather(Partition_1, Face_3, "Face_3")
  Vector_5 = geompy.MakeVectorDXDYDZ(0, 20, 0)
  geompy.addToStudy(Vector_5, "Vector_5")
  Rotation_1 = geompy.MakeRotation(Face_1, Vector_5, 90*math.pi/180.0)
  Rotation_2 = geompy.MakeRotation(Face_1, Vector_5, 180*math.pi/180.0)
  Rotation_3 = geompy.MakeRotation(Face_1, Vector_5, 270*math.pi/180.0)
  geompy.addToStudy(Rotation_1, "Rotation_1")
  geompy.addToStudy(Rotation_2, "Rotation_2")
  geompy.addToStudy(Rotation_3, "Rotation_3")
  Vector_6 = geompy.MakeVectorDXDYDZ(0, 0, 20)
  geompy.addToStudy(Vector_6, "Vector_6")
  Rotation_4 = geompy.MakeRotation(Face_1, Vector_6, 90*math.pi/180.0)
  Rotation_5 = geompy.MakeRotation(Face_1, Vector_6, -90*math.pi/180.0)
  geompy.addToStudy(Rotation_4, "Rotation_4")
  geompy.addToStudy(Rotation_5, "Rotation_5")
  Shell_1 = geompy.MakeShell([Face_1, Rotation_1, Rotation_2, Rotation_3, Rotation_4, Rotation_5])
  Solid_1 = geompy.MakeSolid([Shell_1])

  # RemoveExtraEdges with union of all faces, sharing common surfaces
  box10 = geompy.MakeBoxDXDYDZ(10, 10, 10, "box10")
  box11 = geompy.MakeTranslation(box10, 10, 0, 0, "box11")
  FuseB = geompy.MakeFuse(box10, box11, checkSelfInte=False, rmExtraEdges=False, theName="FuseB")
  NoExtraEdges_1 = geompy.RemoveExtraEdges(FuseB, True) # doUnionFaces = True
  geompy.addToStudy(Shell_1, "Shell_1")
  geompy.addToStudy(Solid_1, "Solid_1")
  geompy.addToStudy(NoExtraEdges_1, "NoExtraEdges_1")
  # RemoveExtraEdges (by default, doUnionFaces = False)
  freeFacesWithoutExtra = geompy.RemoveExtraEdges(freeFaces)
  geompy.addToStudy(freeFacesWithoutExtra, "freeFacesWithoutExtra")

  # UnionFaces
  unitedFaces = geompy.UnionFaces(freeFaces)
  geompy.addToStudy(unitedFaces, "unitedFaces")

  # GetSharedShapes
  sharedFaces = geompy.GetSharedShapes(part, freeFaces,
                                       geompy.ShapeType["FACE"])
  ind = 1
  for shFace in sharedFaces:
    geompy.addToStudy(shFace, "sharedFace_" + repr(ind))
    ind = ind + 1
    pass
  sharedEdges = geompy.GetSharedShapesMulti([part, freeFaces],
                                             geompy.ShapeType["EDGE"])
  ind = 1
  for shEdge in sharedEdges:
    geompy.addToStudy(shEdge, "sharedEdge_" + repr(ind))

    ind = ind + 1
    pass
  # TransferData
  path = os.getenv("DATA_DIR")
  fileName = path + "/Shapes/Step/black_and_white.step"
  blackWhite = geompy.ImportSTEP(fileName)
  blackWhiteCopy = geompy.MakeCopy(blackWhite[0])
  subBlackWhite = geompy.SubShapeAll(blackWhiteCopy, GEOM.SOLID)
  geompy.TransferData(blackWhite[0], blackWhiteCopy)
  geompy.addToStudy(blackWhite[0], "blackWhite")
  geompy.addToStudy(blackWhiteCopy, "blackWhiteCopy")
  geompy.addToStudyInFather( blackWhiteCopy, subBlackWhite[0], "" )
  geompy.addToStudyInFather( blackWhiteCopy, subBlackWhite[1], "" )


GEOM_Spanner.py
def MakeSpanner (geompy, math, isBlocksTest = 0, isMeshTest = 0, smesh = None):
  ### Variables ###
  th = 4.0
  ### Basic points and directions ###
  p0  = geompy.MakeVertex(0., 0., 0.)
  pth = geompy.MakeVertex(0., 0., th)
  vx = geompy.MakeVectorDXDYDZ(1., 0., 0.)
  vy = geompy.MakeVectorDXDYDZ(0., 1., 0.)
  vz = geompy.MakeVectorDXDYDZ(0., 0., 1.)
  vxy = geompy.MakeVectorDXDYDZ(1., 1., 0.)

  ### Block 1 ###
  p_10_0  = geompy.MakeVertex(10.,  0., 0.)
  p_10_25 = geompy.MakeVertex(10., 25., 0.)
  p_0_35  = geompy.MakeVertex( 0., 35., 0.)
  p_0_10  = geompy.MakeVertex( 0., 10., 0.)
  Face11 = geompy.MakeQuad4Vertices(p_10_0, p_10_25, p_0_10, p_0_35);
  id_face11 = geompy.addToStudy(Face11, "1 Face for Block 1")

  Face12 = geompy.MakeTranslationTwoPoints(Face11, p0, pth)
  id_face12 = geompy.addToStudy(Face12, "2 Face for Block 1")

  Block1 = geompy.MakeHexa2Faces(Face11, Face12)
  id_block1 = geompy.addToStudy(Block1, "Block 1")
  ### Block 2 ###
  p_15_0  = geompy.MakeVertex(15.,  0., 0.)
  p_15_20 = geompy.MakeVertex(15., 20., 0.)
  Edge21 = geompy.MakeEdge(p_15_0, p_15_20)
  id_edge21 = geompy.addToStudy(Edge21, "1 Edge for Block 2")
  Edge22 = geompy.GetEdge(Block1, p_10_0, p_10_25)
  id_edge22 = geompy.addToStudy(Edge22, "2 Edge for Block 2")
  Face21 = geompy.MakeQuad2Edges(Edge21, Edge22);
  id_face21 = geompy.addToStudy(Face21, "1 Face for Block 2")
  Face22 = geompy.MakeTranslationTwoPoints(Face21, p0, pth)
  id_face22 = geompy.addToStudy(Face22, "2 Face for Block 2")
  Block2 = geompy.MakeHexa2Faces(Face21, Face22)
  id_block2 = geompy.addToStudy(Block2, "Block 2")
  ### Block 3 ###
  p_15_10_1 = geompy.MakeVertex(15., 10., 1.)

  Face31 = geompy.GetFaceNearPoint(Block2, p_15_10_1)
  id_face31 = geompy.addToStudy(Face31, "1 Face for Block 3")
  Prism1 = geompy.MakePrismVecH(Face31, vx, 5);
  id_prism1 = geompy.addToStudy(Prism1, "Prism to be Block 3")
  nbFaces = geompy.ShapesOp.NumberOfFaces(Prism1)
  if nbFaces == 6:
    print("Prism 1 is a hexahedral solid")
  else:
    print("Prism 1 is not a hexahedral solid")

  Prism1_faces = geompy.SubShapeAllSortedCentres(Prism1, geompy.ShapeType["FACE"])
  ii = 1
  for aFace in  Prism1_faces:
    name = geompy.SubShapeName(aFace, Prism1)
    Id_Face = geompy.addToStudyInFather(Prism1, aFace, name)
    ii = ii + 1

  Block3 = geompy.MakeHexa(Prism1_faces[0], Prism1_faces[1],
                           Prism1_faces[2], Prism1_faces[3],
                           Prism1_faces[4], Prism1_faces[5]);
  id_block3 = geompy.addToStudy(Block3, "Block 3")

  ### Block 4 ###
  Face41 = geompy.GetOppositeFace(Block3, Face31)
  id_face41 = geompy.addToStudy(Face41, "1 Face for Block 4")
  p_25_5  = geompy.MakeVertex(25.,  5., 0.)
  p_25_20 = geompy.MakeVertex(25., 20., 0.)
  Edge41 = geompy.MakeEdge(p_25_5, p_25_20)
  id_edge41 = geompy.addToStudy(Edge41, "1 Edge for Block 4")
  p_25_5_2  = geompy.MakeVertex(25.,  5., th)
  p_25_20_2 = geompy.MakeVertex(25., 20., th)
  Edge42 = geompy.MakeEdge(p_25_5_2, p_25_20_2)
  id_edge42 = geompy.addToStudy(Edge42, "2 Edge for Block 4")
  Edge43 = geompy.MakeEdge(p_25_5, p_25_5_2)
  id_edge43 = geompy.addToStudy(Edge43, "3 Edge for Block 4")
  Edge44 = geompy.MakeEdge(p_25_20, p_25_20_2)
  id_edge44 = geompy.addToStudy(Edge44, "4 Edge for Block 4")
  Face42 = geompy.MakeQuad(Edge41, Edge42, Edge43, Edge44)
  id_face42 = geompy.addToStudy(Face42, "2 Face for Block 4")
  Block4 = geompy.MakeHexa2Faces(Face41, Face42)
  id_block4 = geompy.addToStudy(Block4, "Block 4")
  ### Block 5 ###
  p_25_30   = geompy.MakeVertex(25., 30., 0.)
  p_25_30_1 = geompy.MakeVertex(25., 30., 1)
  axis_rot = geompy.MakeVector(p_25_30, p_25_30_1)
  Face51 = Face42
  Face52 = geompy.MakeRotation(Face51, axis_rot, math.pi/2.)
  id_face52 = geompy.addToStudy(Face52, "2 Face for Block 5")
  Block5 = geompy.MakeHexa2Faces(Face51, Face52)
  id_block5 = geompy.addToStudy(Block5, "Block 5")
  ### Compound of blocks 1 - 4 ###
  Comp1234 = geompy.MakeCompound([Block1, Block2, Block3, Block4])
  Glue1234 = geompy.MakeGlueFaces(Comp1234, 1e-5)
  id_glue1234 = geompy.addToStudy(Glue1234, "Glue 1234")
  plane_mirror = geompy.MakePlane(p_25_30, vxy, 100.)
  #id_plane_mirror = geompy.addToStudy(plane_mirror, "Plane for mirror")
  Mirror1 = geompy.MakeMirrorByPlane(Glue1234, plane_mirror)
  id_mirror1 = geompy.addToStudy(Mirror1, "Mirror 1")
  ### The second end ###
  p_18_0 = geompy.MakeVertex(18., 0., 0.)
  p_20_0 = geompy.MakeVertex(20., 0., 0.)
  p_40_0 = geompy.MakeVertex(40., 0., 0.)
  Edge1s = geompy.MakeEdge(p_20_0, p_40_0)
  id_edge1s = geompy.addToStudy(Edge1s, "1 Edge for Block 1s")
  Edge2s = geompy.MakeRotation(Edge1s, vz, math.pi/12.)
  id_edge2s = geompy.addToStudy(Edge2s, "2 Edge for Block 1s")
  p_18_0_r = geompy.MakeRotation(p_18_0, vz, math.pi/24.)
  p_20_0_r = geompy.MakeRotation(p_20_0, vz, math.pi/12.)
  p_40_0_r = geompy.MakeRotation(p_40_0, vz, math.pi/12.)
  Edge3s = geompy.MakeEdge(p_40_0, p_40_0_r)
  id_edge3s = geompy.addToStudy(Edge3s, "3 Edge for Block 1s")
  Edge4s = geompy.MakeArc(p_20_0, p_18_0_r, p_20_0_r)
  id_edge4s = geompy.addToStudy(Edge4s, "4 Edge for Block 1s")
  Face1s = geompy.MakeQuad(Edge1s, Edge2s, Edge3s, Edge4s)
  id_face1s = geompy.addToStudy(Face1s, "1 Face for Block 1s")
  Block1s = geompy.MakePrismVecH(Face1s, vz, th);
  id_block1s = geompy.addToStudy(Block1s, "Block 1s")
  p_30_0_1 = geompy.MakeVertex(30., 0., 1.)
  Face2s = geompy.GetFaceNearPoint(Block1s, p_30_0_1)
  id_face2s = geompy.addToStudy(Face2s, "2 Face of Block 1s")
  f2s_ind = geompy.LocalOp.GetSubShapeIndex(Block1s, Face2s)
  Block1s_tr1 = geompy.MakeMultiTransformation1D(Block1s, f2s_ind, 0, 24)
  id_block1s_tr1 = geompy.addToStudy(Block1s_tr1, "Multi-transformed Block 1s")
  p_60_150_0 = geompy.MakeVertex(60., -150., 0.)
  Gear = geompy.MakeTranslationTwoPoints(Block1s_tr1, p0, p_60_150_0)
  id_gear = geompy.addToStudy(Gear, "Gear")
  ### Link two parts ###
  ### Linking Block 1 ###
  p_55_0_1 = geompy.MakeVertex(55., 0., 1.)
  p_55_110_1 = geompy.MakeVertex(55., -110., 1.)
  Face11l = geompy.GetFaceNearPoint(Block5, p_55_0_1)
  id_face11l = geompy.addToStudy(Face11l, "1 Face for Linking Block 1")
  Face12l = geompy.GetFaceNearPoint(Gear, p_55_110_1)
  id_face12l = geompy.addToStudy(Face12l, "2 Face for Linking Block 1")
  Block1l = geompy.MakeHexa2Faces(Face11l, Face12l)
  id_block1l = geompy.addToStudy(Block1l, "Linking Block 1")
  ### Linking Block 2 ###
  p_25_0_1 = geompy.MakeVertex(25., 0., 1.)
  p_45_110_1 = geompy.MakeVertex(45., -110., 1.)
  Face21l = geompy.GetFaceNearPoint(Block4, p_25_0_1)
  id_face21l = geompy.addToStudy(Face21l, "1 Face for Linking Block 2")
  Face22l = geompy.GetFaceNearPoint(Gear, p_45_110_1)
  id_face22l = geompy.addToStudy(Face22l, "2 Face for Linking Block 2")
  Block2l = geompy.MakeHexa2Faces(Face21l, Face22l)
  id_block2l = geompy.addToStudy(Block2l, "Linking Block 2")
  ### Linking Block 3 ###
  p_55_30_1 = geompy.MakeVertex(55., 30., 1.)
  p_65_110_1 = geompy.MakeVertex(65., -110., 1.)
  Face31l = geompy.GetFaceNearPoint(Mirror1, p_55_30_1)
  id_face31l = geompy.addToStudy(Face31l, "1 Face for Linking Block 3")
  Face32l = geompy.GetFaceNearPoint(Gear, p_65_110_1)
  id_face32l = geompy.addToStudy(Face32l, "2 Face for Linking Block 3")
  Block3l = geompy.MakeHexa2Faces(Face31l, Face32l)
  id_block3l = geompy.addToStudy(Block3l, "Linking Block 3")
  ### Handle ###
  CompLB = geompy.MakeCompound([Block1l, Block2l, Block3l])
  Handle = geompy.MakeGlueFaces(CompLB, 1e-5)
  id_handle = geompy.addToStudy(Handle, "Handle")
  Block1h = geompy.GetBlockNearPoint(Handle, p_45_110_1)
  id_block1h = geompy.addToStudyInFather(Handle, Block1h, "Block 1 of Handle")
  Block2h = geompy.GetBlockNearPoint(Handle, p_65_110_1)
  id_block2h = geompy.addToStudyInFather(Handle, Block2h, "Block 2 of Handle")
  Face11h = geompy.GetFaceByNormale(Block1h, vx)
  id_face11h = geompy.addToStudyInFather(Block1h, Face11h, "Face 1")
  Face12h = geompy.GetOppositeFace(Block1h, Face11h)
  id_face12h = geompy.addToStudyInFather(Block1h, Face12h, "Face 2")
  Face21h = geompy.GetFaceByNormale(Block2h, vx)
  id_face21h = geompy.addToStudyInFather(Block2h, Face21h, "Face 1")
  Face22h = geompy.GetOppositeFace(Block2h, Face21h)
  id_face22h = geompy.addToStudyInFather(Block2h, Face22h, "Face 2")
  try:
    Block3h = geompy.GetBlockByParts(Handle, [Face11h, Face21h])
  except RuntimeError:
    try:
      Block3h = geompy.GetBlockByParts(Handle, [Face11h, Face22h])
    except RuntimeError:
      try:
        Block3h = geompy.GetBlockByParts(Handle, [Face12h, Face21h])
      except RuntimeError:
        try:
          Block3h = geompy.GetBlockByParts(Handle, [Face12h, Face22h])
        except RuntimeError:
          print("ERROR: BlocksOp.GetBlockByParts() failed : ", geompy.BlocksOp.GetErrorCode())
        else:
          id_block3h = geompy.addToStudyInFather(Handle, Block3h, "Block 3 of Handle")
  ### The whole shape ###
  CompALL = geompy.MakeCompound([Glue1234, Block5, Mirror1, Handle, Gear])
  Spanner = geompy.MakeGlueFaces(CompALL, 1e-5)
  id_glueALL = geompy.addToStudy(Spanner, "The Spanner")

  ### Check the Spanner ###
  isCompOfBlocks6 = geompy.CheckCompoundOfBlocks(Spanner)
  if isCompOfBlocks6 == 0:
    print("Spanner is not a compound of hexahedral solids")
    (NonBlocks, NonQuads) = geompy.GetNonBlocks(Spanner)
    if NonBlocks is not None:
      geompy.addToStudyInFather(Spanner, NonBlocks, "Group of non-hexahedral solids")
    if NonQuads is not None:
      geompy.addToStudyInFather(Spanner, NonQuads, "Group of non-quadrangular faces")
  else:
    print("Spanner is a compound of hexahedral solids")

  if isBlocksTest == 1:
    print("##################### Test More #####################")
    ### Get Blocks 4 and 5 from the spanner ###
    Face42_sp = geompy.GetFaceByEdges(Spanner, Edge41, Edge42)
    id_face42_sp = geompy.addToStudyInFather(Spanner, Face42_sp, "Face 4_2")
    Blocks_f4_sp = geompy.GetBlocksByParts(Spanner, [Face42_sp])
    isMRot2D = 0
    for aBlock in Blocks_f4_sp:
      name = geompy.SubShapeName(aBlock, Spanner)
      Id_block = geompy.addToStudyInFather(Spanner, aBlock, name)
      f42_sp_ind = geompy.LocalOp.GetSubShapeIndex(aBlock, Face42_sp)
      Face_5_horiz = geompy.GetFaceByNormale(aBlock, vz)
      f_5_horiz_ind = geompy.LocalOp.GetSubShapeIndex(aBlock, Face_5_horiz)
      MRot = None
      is2Dok = True
      try:
        MRot = geompy.MakeMultiTransformation2D(aBlock, f42_sp_ind, 0, 3, f_5_horiz_ind, 0, 5)
      except:
        is2Dok = False
      if is2Dok and MRot is not None:
        isMRot2D = 1
        p_z100 = geompy.MakeVertex(0., 0., 100.)
        MRot_tr = geompy.MakeTranslationTwoPoints(MRot, p0, p_z100)
        id_MRot_tr = geompy.addToStudy(MRot_tr, "Multi-rotated block 5")
    if isMRot2D == 0:
      print("2D Multi Transformation failed")
    ### Get one face of the Gear ###
    p_20_0_tr   = geompy.MakeTranslationTwoPoints(p_20_0  , p0, p_60_150_0)
    p_20_0_r_tr = geompy.MakeTranslationTwoPoints(p_20_0_r, p0, p_60_150_0)
    p_40_0_tr   = geompy.MakeTranslationTwoPoints(p_40_0  , p0, p_60_150_0)
    p_40_0_r_tr = geompy.MakeTranslationTwoPoints(p_40_0_r, p0, p_60_150_0)
    Face_g_1 = geompy.GetFaceByPoints(Gear, p_20_0_tr, p_20_0_r_tr, p_40_0_tr, p_40_0_r_tr)
    id_face_g_1 = geompy.addToStudyInFather(Gear, Face_g_1, "Face of Gear by four points")
    edgesNb = geompy.ShapesOp.NumberOfEdges(Face_g_1)
    print("Face of Gear has ", edgesNb, " edges")
    Face_g_1_tr = geompy.MakeTranslationTwoPoints(Face_g_1, p0, pth)
    id_face_g_1_tr = geompy.addToStudyInFather(Gear, Face_g_1_tr, "Face of Gear by four points, translated")
    ### equivalent of Block1s, but made as block
    Block_new = geompy.MakeHexa2Faces(Face_g_1, Face_g_1_tr)
    id_block_new = geompy.addToStudy(Block_new, "Block New")
  if isMeshTest == 1 and smesh is not None:
    print("##################### Build Mesh #####################")
    # ---- add a middle block of spanner handle in study
    p_45_0_1 = geompy.MakeVertex(45., 0., 1.)
    BlockMh = geompy.GetBlockNearPoint(Spanner, p_45_0_1)
    id_blockMh = geompy.addToStudyInFather(Spanner, BlockMh, "Middle Block of Spanner Handle")
    # ---- add the top face of the middle block in study
    FaceTop = geompy.GetFaceByNormale(BlockMh, vz)
    id_facetop = geompy.addToStudyInFather(BlockMh, FaceTop, "Top Face")
    # ---- add long edges of the top face in study
    FaceTop_edges = geompy.SubShapeAllSortedCentres(FaceTop, geompy.ShapeType["EDGE"])
    Edge1 = FaceTop_edges[0]
    Edge2 = FaceTop_edges[3]
    Id_Edge1 = geompy.addToStudyInFather(FaceTop, Edge1, "Edge 1")
    Id_Edge2 = geompy.addToStudyInFather(FaceTop, Edge2, "Edge 2")
    print("-------------------------- Algorithm and Hypothesis")
    print("---- Init a Mesh with the Spanner")
    mesh = smesh.Mesh(Spanner, "Meshed Spanner")
    print("-------------------------- add hypothesis to Spanner")
    print("-------------------------- NumberOfSegments")
    algoReg = mesh.Segment()
    listHyp = algoReg.GetCompatibleHypothesis()
    for hyp in listHyp:
      print(hyp)
    print(algoReg.GetName())
    print(algoReg.GetId())
    algoReg.SetName("Regular_1D")
    hypNbSeg3 = algoReg.NumberOfSegments(3)
    print(hypNbSeg3.GetName())
    print(hypNbSeg3.GetId())
    print(hypNbSeg3.GetNumberOfSegments())
    smesh.SetName(hypNbSeg3, "NumberOfSegments_3")
    print("-------------------------- Quadrangle_2D")
    algoQuad = mesh.Quadrangle()
    listHyp = algoQuad.GetCompatibleHypothesis()
    for hyp in listHyp:
        print(hyp)
    print(algoQuad.GetName())
    print(algoQuad.GetId())
    algoQuad.SetName("Quadrangle_2D")
    print("-------------------------- add hypothesis to the Middle Block")
    print("-------------------------- LocalLength")
    algoRegMb = mesh.Segment(BlockMh)
    hypLen1 = algoRegMb.LocalLength(10)
    print(hypLen1.GetName())
    print(hypLen1.GetId())
    print(hypLen1.GetLength())
    smesh.SetName(hypLen1, "Local_Length_10")
    print("-------------------------- add hypothesis to the long edges of the Top Face of the Middle Block")
    algoRegE1 = mesh.Segment(Edge1)
    hypPropE1 = algoRegE1.Propagation()
    print(hypPropE1.GetName())
    print(hypPropE1.GetId())
    smesh.SetName(hypPropE1, "Propagation hypothesis")
    smesh.SetName(algoRegE1.GetSubMesh(), "SubMesh Edge 1 of Top Face")
    algoRegE2 = mesh.Segment(Edge2)
    hypPropE2 = algoRegE2.Propagation()
    print(hypPropE2.GetName())
    print(hypPropE2.GetId())
    smesh.SetName(hypPropE2, "Propagation hypothesis")
    smesh.SetName(algoRegE2.GetSubMesh(), "SubMesh Edge 2 of Top Face")
    print("-------------------------- compute the mesh")
    mesh.Compute()
    print("Information about the Mesh:")
    print("Number of nodes       : ", mesh.NbNodes())
    print("Number of edges       : ", mesh.NbEdges())
    print("Number of faces       : ", mesh.NbFaces())
    print("Number of triangles   : ", mesh.NbTriangles())
    print("Number of quadrangles : ", mesh.NbQuadrangles())
    print("Number of volumes     : ", mesh.NbVolumes())
    print("Number of tetrahedrons: ", mesh.NbTetras())
  return Spanner


GEOM_TestAll.py
def TestAll (geompy, math):
  import GEOM
  
  #Create base Variables
  nbtimes1  = 5      #Short
  nbtimes2  = 5
  mindeg = 2
  maxdeg = 5
  nbiter = 5
  WantPlanarFace = 1 #True
  radius  = 10.  #Double
  radius1 = 100.
  radius2 = 200.
  height  = 200.
  d1      = 10.
  d2      = 10.
  step1   = 250.
  step2   = 250.
  angle   = 45.
  angle1  = angle * math.pi / 180
  angle2  = 2 * angle1
  factor  = 2.
  tol3d   = 0.0001
  tol2d   = 0.0001
  weight  = 1000000.
  waterdensity = 1.
  meshingdeflection = 0.01
  trimsize  = 1000.
  precision = 0.00001
  #Create base points
  p0   = geompy.MakeVertex(0.  , 0.  , 0.  ) #(3 Doubles)->GEOM_Object
  px   = geompy.MakeVertex(100., 0.  , 0.  )
  py   = geompy.MakeVertex(0.  , 100., 0.  )
  pz   = geompy.MakeVertex(0.  , 0.  , 100.)
  pxyz = geompy.MakeVertex(100., 100., 100.)
  p200 = geompy.MakeVertexWithRef(pxyz, 100., 100., 100.) #(GEOM_Object, 3 Doubles)->GEOM_Object
  #Create base directions
  vx   = geompy.MakeVector(p0, px) #(GEOM_Object, GEOM_Object)->GEOM_Object
  vy   = geompy.MakeVector(p0, py)
  vz   = geompy.MakeVector(p0, pz)
  vxy  = geompy.MakeVector(px, py)
  vxyz = geompy.MakeVectorDXDYDZ(100., 100., 100.) #(3 Doubles)->GEOM_Object

  #Create local coordinate systems
  cs1 = geompy.MakeMarker(50,50,50, 1,0,0, 0,1,0) #(9 Doubles)->GEOM_Object
  cs2 = geompy.MakeMarker(70,80,10, 1,0,1, 1,1,0) #(9 Doubles)->GEOM_Object
  cs3 = geompy.MakeMarkerPntTwoVec(pz, vxy, vz)   #(3 GEOM_Object)->GEOM_Object
  #Create base geometry 2D
  Line   = geompy.MakeLineTwoPnt(p0, pxyz)                  #(2 GEOM_Object)->GEOM_Object
  Line1  = geompy.MakeLine(pz, vxy)                         #(2 GEOM_Object)->GEOM_Object
  Line2  = geompy.MakeLineTwoPnt(pxyz, pz)                  #(2 GEOM_Object)->GEOM_Object
  Plane  = geompy.MakePlane(pz, vxyz, trimsize)             #(2 GEOM_Object, Double)->GEOM_Object
  Plane1 = geompy.MakePlaneThreePnt(px, pz, p200, trimsize) #(4 Doubles)->GEOM_Object
  Plane2 = geompy.MakePlane2Vec(vx, vz, trimsize)     #(2 GEOM_Object, Double)->GEOM_Object
  Plane3 = geompy.MakePlaneLCS(cs1, trimsize, 3)      #(1 GEOM_Object, 2 Double)->GEOM_Object

  Arc      = geompy.MakeArc(py, pz, px)                   #(3 GEOM_Object)->GEOM_Object
  Arc2     = geompy.MakeArcCenter(py, pz, px,0)           #(3 GEOM_Object,Boolean)->GEOM_Object
  Arc3     = geompy.MakeArcOfEllipse(p0, px, pz)          #(3 GEOM_Object,Boolean)->GEOM_Object

  Circle   = geompy.MakeCircle(p0, vz, radius1)           #(2 GEOM_Object, Double)->GEOM_Object
  Circle1  = geompy.MakeCircleThreePnt(p0, pxyz, px)      #(3 GEOM_Object)->GEOM_Object
  Circle2  = geompy.MakeCircleCenter2Pnt(p0, pxyz, py)    #(3 GEOM_Object)->GEOM_Object
  Ellipse  = geompy.MakeEllipse(p0, vy, radius2, radius1) #(2 GEOM_Object, 2 Doubles)->GEOM_Object
  Polyline = geompy.MakePolyline([p0, pz, py, p200])      #(List of GEOM_Object)->GEOM_Object
  Bezier   = geompy.MakeBezier([p0, pz, p200, px])        #(List of GEOM_Object)->GEOM_Object
  Interpol = geompy.MakeInterpol([px, py, p200, pxyz], True) #(List of GEOM_Object,Boolean)->GEOM_Object
  InterpT1 = geompy.MakeInterpolWithTangents([px, py, pxyz], vx, vz) #(List of GO, GO, GO)->GEOM_Object
  InterpT2 = geompy.MakeInterpolWithTangents([px, py, pxyz], vxy, vxyz) #(List of GO, GO, GO)->GEOM_Object
  Sketcher = geompy.MakeSketcher("Sketcher:F -100 -100:TT 250 -100:R 0:C 100 150:R 0:L 300:WW",
                                 [100,0,0, 1,1,1, -1,1,0]) #(String, List of Doubles)->GEOM_Object
  #Create 3D wires with 3D Sketcher
  sk = geompy.Sketcher3D()
  sk.addPointsAbsolute(0,0,0, 70,0,0)
  sk.addPointsRelative(0, 0, 130)
  sk.addPointRadiusAnglesRelative(100, 50, 0,"OXY")
  sk.addPointRadiusAnglesRelative(130, 30, 80, "OXZ")
  sk.addPointRadiusAnglesAbsolute(500, 60, 30,"OXY")
  sk.addPointRadiusAngleHRelative(100, 50, 0,"OXY")
  sk.addPointRadiusAngleHRelative(130, 30, 40, "OXZ")
  sk.addPointRadiusAngleHAbsolute(800, 60, 30,"OXY")
  sk.close()
  Sketcher3d_1 = sk.wire()
  Sketcher3d_2 = geompy.Make3DSketcher([0,0,0, 50,50,50, 0,50,50, 10,0,0])
  #Create local coordinate system from shape
  cs4 = geompy.MakeMarkerFromShape(Plane)
  #Test point on curve creation
  p_on_arc = geompy.MakeVertexOnCurve(Arc, 0.25) #(GEOM_Object, Double)->GEOM_Object
  p_on_arc2 = geompy.MakeVertexOnCurveByCoord(Arc, 100, -10, 10 ) #(GEOM_Object, Double)->GEOM_Object
  p_on_arc3 = geompy.MakeVertexOnCurveByLength(Arc, 50, py) #(GEOM_Object, Double, GEOM_Object)->GEOM_Object

  #Test point on lines intersection
  p_on_l1l2 = geompy.MakeVertexOnLinesIntersection(Line1, Line2) #(2 GEOM_Object)->GEOM_Object

  #Test tangent on curve creation
  tan_on_arc = geompy.MakeTangentOnCurve(Arc, 0.7) #(GEOM_Object, Double)->GEOM_Object

  
  #Test tangent on face creation
  tan_vertex_1 = geompy.MakeVertex(0, 0, 0)
  tan_vertex_2 = geompy.MakeVertex(0, 90, 30)
  tan_vertex_3 = geompy.MakeVertex(100, 90, 0)
  tan_vertex_4 = geompy.MakeVertex(-100, 90, 0)
  tan_curve = geompy.MakeInterpol([tan_vertex_4, tan_vertex_2, tan_vertex_3, tan_vertex_1], False)
  tan_extrusion = geompy.MakePrismDXDYDZ(tan_curve, 0, 30, -60)
  tan_on_face = geompy.MakeTangentPlaneOnFace(tan_extrusion, 0.7, 0.5, 150)
  #Create base geometry 3D
  Box      = geompy.MakeBoxTwoPnt(p0, p200)                             #(2 GEOM_Object)->GEOM_Object
  Box1     = geompy.MakeBoxDXDYDZ(10, 20, 30)                           #(3 Doubles)->GEOM_Object
  Box2     = geompy.MakeBox(10,20,30, 15,25,35)                         #(6 Doubles)->GEOM_Object
  Cylinder = geompy.MakeCylinder(p0, vz, radius1, height)               #(2 GEOM_Object, 2 Doubles)->GEOM_Object
  Cyl1     = geompy.MakeCylinderRH(radius2, height)                     #(2 Doubles)->GEOM_Object
  Cylinder1= geompy.MakeCylinderA(p0, vz, radius1, height, angle1)      #(2 GEOM_Object, 3 Doubles)->GEOM_Object
  Cyl2     = geompy.MakeCylinderRHA(radius2, height, angle2)            #(3 Doubles)->GEOM_Object
  Sphere   = geompy.MakeSpherePntR(p0, radius1)                         #(GEOM_Object, Double)->GEOM_Object
  Sphere1  = geompy.MakeSphereR(radius)                                 #(Double)->GEOM_Object
  Sphere2  = geompy.MakeSphere(50, 70, 30, radius)                      #(4 Doubles)->GEOM_Object
  Cone     = geompy.MakeCone(p0, vz, radius2, radius, height)           #(2 GEOM_Object, 3 Doubles)->GEOM_Object
  Cone1    = geompy.MakeConeR1R2H(radius1, radius, height)              #(3 Doubles)->GEOM_Object
  Torus    = geompy.MakeTorus(p0, vz, radius2, radius)                  #(2 GEOM_Object, 2 Doubles)->GEOM_Object
  Torus1   = geompy.MakeTorusRR(radius2, radius1)                       #(2 Doubles)->GEOM_Object
  #Boolean (Common, Cut, Fuse, Section)
  Common  = geompy.MakeBoolean(Box, Sphere, 1) #(2 GEOM_Object, Short)->GEOM_Object
  Cut     = geompy.MakeBoolean(Box, Sphere, 2)
  Fuse    = geompy.MakeBoolean(Box, Sphere, 3)
  Section = geompy.MakeBoolean(Box, Sphere, 4)
  #Create base objects
  Edge     = geompy.MakeEdge(p0, pxyz)               #(2 GEOM_Object)->GEOM_Object
  Edge1    = geompy.MakeEdgeOnCurveByLength(Arc, 50, px) #(GEOM_Object, Double, GEOM_Object)->GEOM_Object
  Wire     = geompy.MakeWire([vxy, Arc])             #(List Of GEOM_Object)->GEOM_Object
  Face     = geompy.MakeFace(Wire, WantPlanarFace)   #(GEOM_Object, Boolean)->GEOM_Object
  Face1    = geompy.MakeFaceWires([Wire, Sketcher],
                                  WantPlanarFace)    #(List of GEOM_Object, Boolean)->GEOM_Object
  Face2    = geompy.MakeFace(Sketcher, WantPlanarFace)
  Face3    = geompy.MakeFaceHW (100., 200., 1)       #(2 Doubles, 1 Int)->GEOM_Object
  Face4    = geompy.MakeFaceObjHW (vz, 200., 100.)   #(1 GEOM_Object, 2 Doubles)->GEOM_Object
  Face5    = geompy.MakeFaceFromSurface(Face, Sketcher) #(2 GEOM_Objects)->GEOM_Object
  
  Cut2 = geompy.MakeCutList(Sphere1, [Box1], True)
  #(List of GEOM_Object)->GEOM_Object
  Face6 = geompy.MakeFaceWithConstraints([geompy.GetSubShape(Cut2, [5]),  geompy.GetSubShape(Cut2, [3]), 
                                          geompy.GetSubShape(Cut2, [11]), geompy.GetSubShape(Cut2, [3]),
                                          geompy.GetSubShape(Cut2, [13]), geompy.GetSubShape(Cut2, [3])])
  Disk     = geompy.MakeDiskPntVecR (p0, vz, radius) #(2 GEOM_Object, 1 Double)->GEOM_Object
  Disk2    = geompy.MakeDiskThreePnt(p0, p200, pz)   #(3 GEOM_Object)->GEOM_Object
  Disk3    = geompy.MakeDiskR(100., 1)               #(1 Doubles, 1 Int)->GEOM_Object
  Shell    = geompy.MakeShell([Face, Face1])         #(List of GEOM_Object)->GEOM_Object
  Prism1   = geompy.MakePrism(Face2, p0, pxyz)       #(3 GEOM_Object)->GEOM_Object
  prism1_faces = geompy.SubShapeAllSortedCentres(Prism1, geompy.ShapeType["FACE"])
  Shell1   = geompy.MakeShell([prism1_faces[0], prism1_faces[1],
                               prism1_faces[3], prism1_faces[4],
                               prism1_faces[5], prism1_faces[2]])
  Solid    = geompy.MakeSolid([Shell1])              #(List of GEOM_Object)->GEOM_Object
  
  Box1_translation = geompy.MakeTranslation(Box1, 10, 0, 0)
  Box1_shell = geompy.SubShapeAllSorted(Box1, geompy.ShapeType["SHELL"])[0]
  Box1_translation_shell = geompy.SubShapeAllSorted(Box1_translation, geompy.ShapeType["SHELL"])[0]
  
  Solid_from_shells = geompy.MakeSolidFromConnectedFaces([Box1_shell, Box1_translation_shell], 1) #(List of GEOM_Object, Boolean)->GEOM_Object
  
  # Create Isoline
  Isoline = geompy.MakeIsoline(Face1, True, 0.5)     #(1 GEOM_Object, Boolean, Double)->GEOM_Object
  ShapeListCompound = []
  i = 0
  while i <= 3 :
        S = geompy.MakeTranslation(Arc, i * 100., i * 100., i * 100.)
        ShapeListCompound.append(S)
        i = i + 1
  Compound = geompy.MakeCompound(ShapeListCompound)  #(List of GEOM_Object)->GEOM_Object

  #Test point on surface creation
  p_on_face = geompy.MakeVertexOnSurface(Face, 0.1, 0.8) #(GEOM_Object, Double, Double)->GEOM_Object

  p_on_face2 = geompy.MakeVertexOnSurfaceByCoord(Face, 0., 0., 0.) #(GEOM_Object, Double, Double, Double)->GEOM_Object

  p_on_face3 = geompy.MakeVertexInsideFace(Face) #(GEOM_Object)->GEOM_Object
  # Test plane from existing face creation
  Plane2 = geompy.MakePlaneFace(Face, trimsize)      #(GEOM_Object, Double)->GEOM_Object
  #ShapeList for Sewing
  S = geompy.MakeRotation(Face, vxy, angle1)

  #Test Line on Faces Intersection
  Line3 = geompy.MakeLineTwoFaces(prism1_faces[0], prism1_faces[1]) #(2 GEOM_Object)->GEOM_Object

  #Create advanced objects
  Prism            = geompy.MakePrismVecH(Face, vz, 100.0)     #(2 GEOM_Object, Double)->GEOM_Object
  Prism2Ways       = geompy.MakePrismVecH2Ways(Face, vz, 10.0) #(2 GEOM_Object, Double)->GEOM_Object
  PrismTwoPnt      = geompy.MakePrism(Face2, p0, pxyz)         #(3 GEOM_Object)->GEOM_Object
  PrismTwoPnt2Ways = geompy.MakePrism2Ways(Face2, p0, pxyz)    #(3 GEOM_Object)->GEOM_Object
  PrismDXDYDZ      = geompy.MakePrismDXDYDZ(Face2, 10, 20, 100)#(2 GEOM_Object, Double)->GEOM_Object
  PrismDXDYDZ2Ways = geompy.MakePrismDXDYDZ2Ways(Face, 30, -20, 200)#(2 GEOM_Object, Double)->GEOM_Object
  Revolution       = geompy.MakeRevolution(Face, vxy, angle2)      #(2 GEOM_Object, Double)->GEOM_Object
  Revolution2Ways  = geompy.MakeRevolution2Ways(Face, vxy, angle1) #(2 GEOM_Object, Double)->GEOM_Object
  Filling          = geompy.MakeFilling(Compound, mindeg, maxdeg,
                                        tol2d, tol3d, nbiter)  #(GEOM_Object, 4 Doubles, Short)->GEOM_Object
  Pipe             = geompy.MakePipe(Wire, Edge)               #(2 GEOM_Object)->GEOM_Object
  Sewing           = geompy.MakeSewing([Face, S], precision)   #(List Of GEOM_Object, Double)->GEOM_Object
  ThickSolid       = geompy.MakeCopy(Box)
  faces            = geompy.SubShapeAllSortedCentres(Box, geompy.ShapeType["FACE"])
  shell            = geompy.MakeShell([faces[0], faces[1], faces[2]])
  faceIDs          = geompy.SubShapeAllSortedCentresIDs(ThickSolid, geompy.ShapeType["FACE"])
  ThickShell       = geompy.MakeThickSolid(shell, 50)          #(GEOM_Object, Double)->GEOM_Object
  geompy.Thicken(ThickSolid, 50, [faceIDs[0], faceIDs[1]])     #(GEOM_Object) modification

  Copy             = geompy.MakeCopy(Box)                      #(GEOM_Object)->GEOM_Object

  #Transform objects
  Translation = geompy.MakeTranslationTwoPoints(Box, px, pz)    #(3 GEOM_Object)->GEOM_Object
  TranslVect  = geompy.MakeTranslationVector(Box, vxyz)         #(2 GEOM_Object)->GEOM_Object
  TranslVectD = geompy.MakeTranslationVectorDistance(Box, vxyz, 50.0)   #(2 GEOM_Object)->GEOM_Object  
  Rotation    = geompy.MakeRotation(Box, vz, angle1)            #(2 GEOM_Object, Double)->GEOM_Object
  RotatPnt    = geompy.MakeRotationThreePoints(Box, px, py, pz) #(4 GEOM_Object)->GEOM_Object

  #Scale by factor relatively given point
  Scale1 = geompy.MakeScaleTransform(Box, pxyz, factor)      #(2 GEOM_Object, Double)->GEOM_Object
  #Scale by factor relatively the origin of global CS
  Scale2 = geompy.MakeScaleTransform(Box, None, factor)      #
  #Scale along axes of global CS by different factors. Scale relatively given point
  Scale3 = geompy.MakeScaleAlongAxes(Box, pxyz, 1.5, 0.5, 3) #(2 GEOM_Object, 3 Doubles)->GEOM_Object
  #Scale along axes of global CS by different factors. Scale relatively the origin of global CS
  Scale4 = geompy.MakeScaleAlongAxes(Box, None, 1.5, 0.5, 3) #

  Mirror      = geompy.MakeMirrorByPlane(Box, Plane) #(2 GEOM_Object)->GEOM_Object
  MirrorAxis  = geompy.MakeMirrorByAxis(Box, Line1)  #
  MirrorPnt   = geompy.MakeMirrorByPoint(Box, p200)  #
  Position    = geompy.MakePosition(Box, cs1, cs2)   #(3 GEOM_Object)->GEOM_Object
  Position2   = geompy.PositionAlongPath(Box, Arc, 0.5, 1, 0)  #(2 GEOM_Object, 1 Double, 2 Bool)->GEOM_Object
  Offset      = geompy.MakeOffset(Box, 10.)          #(GEOM_Object, Double)->GEOM_Object
  ProjOnWire  = geompy.MakeProjectionOnWire(p0, Wire)
  ProjOnCyl   = geompy.MakeProjectionOnCylinder(Wire, 100)

  Orientation = geompy.ChangeOrientation(Box)

  ExtEdge     = geompy.ExtendEdge(Edge1, -0.3, 1.3)
  ExtFace     = geompy.ExtendFace(Face5, -0.3, 1.3, -0.1, 1.1)

  Surface     = geompy.MakeSurfaceFromFace(Face5)

  #IDList for Fillet/Chamfer
  prism_edges = geompy.ExtractShapes(Prism, geompy.ShapeType["EDGE"], True)
  for anEdge in prism_edges:
    eid = geompy.GetSubShapeID(Prism, anEdge)
    sse = geompy.GetSubShape(Prism, [eid])
    sse_id = geompy.GetSubShapeID(Prism, sse)
    if sse_id != eid:
      print("Error: GetSubShape() or GetSubShapeID() has failed!")
  IDlist_e = []
  IDlist_e.append(geompy.GetSubShapeID(Prism, prism_edges[0]))
  IDlist_e.append(geompy.GetSubShapeID(Prism, prism_edges[1]))
  IDlist_e.append(geompy.GetSubShapeID(Prism, prism_edges[2]))
  prism_faces = geompy.ExtractShapes(Prism, geompy.ShapeType["FACE"], True)
  f_ind_1 = geompy.GetSubShapeID(Prism, prism_faces[0])
  f_ind_2 = geompy.GetSubShapeID(Prism, prism_faces[1])
  IDlist_f = [f_ind_1, f_ind_2]

  
  #Local operations
  Fillet2d = geompy.MakeFillet2D(Face3, radius, [4, 7, 9]) #(GEOM_Object, Double, ListOfLong)->GEOM_Object
  Fillet   = geompy.MakeFillet (Prism, radius, geompy.ShapeType["EDGE"],
                                IDlist_e) #(GEOM_Object, Double, Short, ListOfLong)->GEOM_Object
  Fillet2  = geompy.MakeFilletR1R2 (Prism, 7., 13., geompy.ShapeType["EDGE"],
                                    IDlist_e) #(GEOM_Object, Double, Double, Short, ListOfLong)->GEOM_Object
  Chamfer  = geompy.MakeChamferEdge(Prism, d1, d2,
                                    f_ind_1, f_ind_2) #(GEOM_Object, 2 Doubles, 2 Long)->GEOM_Object
  Chamfer2 = geompy.MakeChamferFaces(Prism, d1, d2,
                                     IDlist_f) #(GEOM_Object, 2 Doubles, ListOfLong)->GEOM_Object
  Chamfer3 = geompy.MakeChamferEdges(Prism, d1, d2,
                                     IDlist_e) #(GEOM_Object, 2 Doubles, ListOfLong)->GEOM_Object
  Chamfer4 = geompy.MakeChamferFacesAD(Prism, d1, 20. * math.pi / 180.,
                                       IDlist_f) #(GEOM_Object, 2 Doubles, ListOfLong)->GEOM_Object
  #End of Local operations

  #Create Patterns
  MultiTrans1D = geompy.MakeMultiTranslation1D(Fillet, vz, step1, nbtimes1)
  MultiTrans2D = geompy.MakeMultiTranslation2D(Fillet, vz, step1, nbtimes1, vy, step2, nbtimes2)
  MultiRot1Dt  = geompy.MultiRotate1DNbTimes(Chamfer, vx, nbtimes1)
  MultiRot1Ds  = geompy.MultiRotate1DByStep(Chamfer, vx, math.pi/4., nbtimes1)
  MultiRot2Dt  = geompy.MultiRotate2DNbTimes(Chamfer, vx, nbtimes1, step1, nbtimes2)
  MultiRot2Ds  = geompy.MultiRotate2DByStep(Chamfer, vx, angle1, nbtimes1, step1, nbtimes2)

  #Create Information objects
  CDG        = geompy.MakeCDG(Prism)               #(GEOM_Object)->GEOM_Object
  Archimede  = geompy.Archimede(Box, weight, waterdensity,
                                meshingdeflection) #(GEOM_Object, 3 Doubles)->GEOM_Object
  mindist = geompy.MinDistanceComponents(TranslVect, Mirror) #(2 GEOM_Object)->4 Doubles
  print("Minumal distance between TranslVect and Mirror is", mindist[0], end=' ')
  print("by components:", mindist[1], ",", mindist[2], ",", mindist[3])
  CheckShape = geompy.CheckShape(Prism)            #(GEOM_Object)->Boolean
  print("CheckShape(Prism) = ", CheckShape)

  #Partition objects
  Partition  = geompy.MakePartition([Box], [Plane]) #(2 Lists Of GEOM_Object)->GEOM_Object
  Partition1 = geompy.MakeHalfPartition(Box, Plane) #(2 GEOM_Object)->GEOM_Object

  #Add In Study
  id_p0   = geompy.addToStudy(p0,   "Vertex 0")
  id_px   = geompy.addToStudy(px,   "Vertex X")
  id_py   = geompy.addToStudy(py,   "Vertex Y")
  id_pz   = geompy.addToStudy(pz,   "Vertex Z")
  id_pxyz = geompy.addToStudy(pxyz, "Vertex XYZ")
  id_p200 = geompy.addToStudy(p200, "Vertex 200")
  id_vx   = geompy.addToStudy(vx,   "Vector X")
  id_vy   = geompy.addToStudy(vy,   "Vector Y")
  id_vz   = geompy.addToStudy(vz,   "Vector Z")
  id_vxy  = geompy.addToStudy(vxy,  "Vector XY")
  id_vxyz = geompy.addToStudy(vxyz, "Vector XYZ")
  id_cs1 = geompy.addToStudy(cs1, "CS 50,50,50, 1,0,0, 0,1,0")
  id_cs2 = geompy.addToStudy(cs2, "CS 70,80,10, 1,0,1, 1,1,0")
  id_cs3 = geompy.addToStudy(cs3, "CS: pz, vxy, vz")
  id_cs4 = geompy.addToStudy(cs4, "CS: Plane")
  id_Line   = geompy.addToStudy(Line,   "Line")
  id_Line1  = geompy.addToStudy(Line1,  "Line by point and vector")
  id_Line3  = geompy.addToStudy(Line3,  "Line on Two Faces Intersection")
  id_Plane  = geompy.addToStudy(Plane,  "Plane")
  id_Plane1 = geompy.addToStudy(Plane1,  "Plane by 3 points")
  id_Plane2 = geompy.addToStudy(Plane2,  "Plane by 2 vectors")
  id_Plane3 = geompy.addToStudy(Plane3,  "Plane by LCS")
  id_Arc      = geompy.addToStudy(Arc,      "Arc")
  id_Arc2     = geompy.addToStudy(Arc2,     "Arc2")
  id_Arc3     = geompy.addToStudy(Arc3,     "Arc3")
  id_Circle   = geompy.addToStudy(Circle,   "Circle")
  id_Circle1  = geompy.addToStudy(Circle1,  "Circle by 3 points")
  id_Circle2  = geompy.addToStudy(Circle2,  "Circle by center and 2 points")
  id_Ellipse  = geompy.addToStudy(Ellipse,  "Ellipse")
  id_Polyline = geompy.addToStudy(Polyline, "Polyline")
  id_Bezier   = geompy.addToStudy(Bezier,   "Bezier")
  id_Interpol = geompy.addToStudy(Interpol, "Interpol")
  id_InterpT1 = geompy.addToStudy(InterpT1, "InterpT1")
  id_InterpT2 = geompy.addToStudy(InterpT2, "InterpT2")
  id_Sketcher = geompy.addToStudy(Sketcher, "Sketcher")
  id_Sketcher3d_1 = geompy.addToStudy(Sketcher3d_1, "Sketcher 3D by interface")
  id_Sketcher3d_2 = geompy.addToStudy(Sketcher3d_2, "Sketcher 3D by list")
  id_p_on_arc  = geompy.addToStudy(p_on_arc,  "Vertex on Arc (0.25)")
  id_p_on_arc2 = geompy.addToStudy(p_on_arc2, "Vertex on Arc at(100, -10, 10)" )
  id_p_on_arc3 = geompy.addToStudy(p_on_arc3, "Vertex on Arc length 50 from Vertex X" )
  
  id_p_on_l1l2 = geompy.addToStudy(p_on_l1l2, "Vertex on Lines Intersection")
  id_tan_on_arc  = geompy.addToStudy(tan_on_arc, "Tangent on Arc (0.7)")
  id_tan_on_face = geompy.addToStudy(tan_on_face, "Tangent on Face")
  id_Box      = geompy.addToStudy(Box,      "Box")
  id_Box1     = geompy.addToStudy(Box1,     "Box 10x20x30")
  id_Box2     = geompy.addToStudy(Box2,     "Box (10,20,30)-(15,25,35)")
  id_Cylinder = geompy.addToStudy(Cylinder, "Cylinder")
  id_Cyl1     = geompy.addToStudy(Cyl1,     "Cylinder RH")
  id_Cylinder1= geompy.addToStudy(Cylinder1,"CylinderA")
  id_Cyl2     = geompy.addToStudy(Cyl2,     "Cylinder RHA")
  id_Sphere   = geompy.addToStudy(Sphere,   "Sphere Pnt R")
  id_Sphere1  = geompy.addToStudy(Sphere1,  "Sphere R")
  id_Sphere2  = geompy.addToStudy(Sphere2,  "Sphere")
  id_Cone     = geompy.addToStudy(Cone,     "Cone")
  id_Cone1    = geompy.addToStudy(Cone1,    "Cone R1R2H")
  id_Torus    = geompy.addToStudy(Torus,    "Torus")
  id_Torus1   = geompy.addToStudy(Torus1,   "Torus RR")
  id_Common  = geompy.addToStudy(Common,  "Common")
  id_Cut     = geompy.addToStudy(Cut,     "Cut")
  id_Cut2    = geompy.addToStudy(Cut2,    "Cut2")
  id_Fuse    = geompy.addToStudy(Fuse,    "Fuse")
  id_Section = geompy.addToStudy(Section, "Section")
  id_Edge     = geompy.addToStudy(Edge,     "Edge")
  id_Edge1    = geompy.addToStudy(Edge1,    "Edge on Arc length 50 from Vertex Y")
  id_Wire     = geompy.addToStudy(Wire,     "Wire")
  id_Face     = geompy.addToStudy(Face,     "Face")
  id_Face1    = geompy.addToStudy(Face1,    "Face from two wires")
  id_Face2    = geompy.addToStudy(Face2,    "Face from Sketcher")
  id_Face3    = geompy.addToStudy(Face3,    "Face Height Width")
  id_Face4    = geompy.addToStudy(Face4,    "Face Plane_HW")
  id_Face5    = geompy.addToStudy(Face5,    "Face from surface and wire")
  id_Face6    = geompy.addToStudy(Face6,    "Face from edges with constraints")
  id_Disk     = geompy.addToStudy(Disk,     "Disk PntVecR")
  id_Disk2    = geompy.addToStudy(Disk2,    "Disk Three Points")
  id_Disk3    = geompy.addToStudy(Disk3,    "Disk OXY Radius")
  id_Shell    = geompy.addToStudy(Shell,    "Shell")
  id_Isoline  = geompy.addToStudy(Isoline,  "Isoline")
  id_p_on_face = geompy.addToStudy(p_on_face, "Vertex on Face (0.1, 0.8)")
  id_p_on_face2 = geompy.addToStudy(p_on_face2, "Vertex on Face at(0., 0., 0.)")
  id_p_on_face3 = geompy.addToStudy(p_on_face3, "Vertex inside Face")
  id_Prism1   = geompy.addToStudy(Prism1,     "Prism by Two Pnt")
  id_Shell1   = geompy.addToStudy(Shell1,   "Shell from Prism1 faces")
  id_Solid    = geompy.addToStudy(Solid,    "Solid")
  id_Solid1   = geompy.addToStudy(Solid_from_shells,   "Solid1")
  
  id_Compound = geompy.addToStudy(Compound, "Compound")
  id_Plane2   = geompy.addToStudy(Plane2,   "Plane on Face")
  id_Copy       = geompy.addToStudy(Copy,       "Copy")
  id_ThickShell = geompy.addToStudy(ThickShell, "ThickShell")
  id_ThickSolid = geompy.addToStudy(ThickSolid, "ThickSolid")
  id_Prism            = geompy.addToStudy(Prism,            "Prism")
  id_Prism2Ways       = geompy.addToStudy(Prism2Ways,       "Prism2Ways")
  id_PrismTwoPnt      = geompy.addToStudy(PrismTwoPnt,      "PrismTwoPnt")
  id_PrismTwoPnt2Ways = geompy.addToStudy(PrismTwoPnt2Ways, "PrismTwoPnt2Ways")
  id_PrismDXDYDZ      = geompy.addToStudy(PrismDXDYDZ,      "PrismDXDYDZ")
  id_PrismDXDYDZ2Ways = geompy.addToStudy(PrismDXDYDZ2Ways, "PrismDXDYDZ2Ways")
  id_Revolution       = geompy.addToStudy(Revolution,       "Revolution")
  id_Revolution2Ways  = geompy.addToStudy(Revolution2Ways,  "Revolution2Ways")
  id_Filling    = geompy.addToStudy(Filling,    "Filling")
  id_Pipe       = geompy.addToStudy(Pipe,       "Pipe")
  id_Sewing     = geompy.addToStudy(Sewing,     "Sewing")
  import salome_version
  if int(salome_version.getXVersion(), 16) >= int('0x060600', 16):
    [Face5, Face6] = geompy.SubShapes(Box, [31, 33])
    [b1_e1, b1_e2, b1_e3, b1_e4] = geompy.SubShapes(Box, [12, 22, 25, 29])
    [b2_e1, b2_e2, b2_e3, b2_e4] = geompy.SubShapes(Box, [ 8, 18, 26, 30])
    Path1 = geompy.RestorePath(Box, Face5, Face6)
    Path2 = geompy.RestorePathEdges(Box, [b1_e1, b1_e2, b1_e3, b1_e4], [b2_e1, b2_e2, b2_e3, b2_e4])
    id_Base1      = geompy.addToStudyInFather(Box, Face5, "Base1")
    id_Base2      = geompy.addToStudyInFather(Box, Face6, "Base2")
    id_Base1e1    = geompy.addToStudyInFather(Box, b1_e1, "Base1 Edge1")
    id_Base1e2    = geompy.addToStudyInFather(Box, b1_e2, "Base1 Edge2")
    id_Base1e3    = geompy.addToStudyInFather(Box, b1_e3, "Base1 Edge3")
    id_Base1e4    = geompy.addToStudyInFather(Box, b1_e4, "Base1 Edge4")
    id_Base2e1    = geompy.addToStudyInFather(Box, b2_e1, "Base2 Edge1")
    id_Base2e2    = geompy.addToStudyInFather(Box, b2_e2, "Base2 Edge2")
    id_Base2e3    = geompy.addToStudyInFather(Box, b2_e3, "Base2 Edge3")
    id_Base2e4    = geompy.addToStudyInFather(Box, b2_e4, "Base2 Edge4")
    id_Path1      = geompy.addToStudy(Path1,      "Path1")
    id_Path2      = geompy.addToStudy(Path2,      "Path2")
    pass
  id_Translation = geompy.addToStudy(Translation,   "Translation")
  id_TranslVect  = geompy.addToStudy(TranslVect ,   "Translation along vector")
  id_TranslVectD = geompy.addToStudy(TranslVectD,   "Translation along vector with defined distance")
  id_Rotation    = geompy.addToStudy(Rotation,      "Rotation")
  id_RotatPnt    = geompy.addToStudy(RotatPnt,      "Rotation by three points")
  id_Scale1      = geompy.addToStudy(Scale1,        "Scale1")
  id_Scale2      = geompy.addToStudy(Scale2,        "Scale2")
  id_Scale3      = geompy.addToStudy(Scale3,        "Scale3")
  id_Scale4      = geompy.addToStudy(Scale4,        "Scale4")
  id_Mirror      = geompy.addToStudy(Mirror,        "Mirror by Plane")
  id_MirrorAxis  = geompy.addToStudy(MirrorAxis,    "Mirror by Axis")
  id_MirrorPnt   = geompy.addToStudy(MirrorPnt,     "Mirror by Point")
  id_Position    = geompy.addToStudy(Position,      "Positioned box")
  id_Position2   = geompy.addToStudy(Position2,     "Positioned box along path")
  id_Offset      = geompy.addToStudy(Offset,        "Offset")
  id_Orientation = geompy.addToStudy(Orientation,   "Orientation")
  id_ProjOnWire  = geompy.addToStudy(ProjOnWire[1], "ProjOnWire")
  id_ProjOnCyl   = geompy.addToStudy(ProjOnCyl,     "ProjOnCyl")
  id_ExtEdge     = geompy.addToStudy(ExtEdge,       "ExtendedEdge")
  id_ExtFace     = geompy.addToStudy(ExtFace,       "ExtendedFace")
  id_Surface     = geompy.addToStudy(Surface,       "Surface From Face")
  id_Fillet   = geompy.addToStudy(Fillet,   "Fillet")
  id_Fillet2  = geompy.addToStudy(Fillet2,  "Fillet2")
  id_Fillet2d = geompy.addToStudy(Fillet2d, "Fillet2D")
  id_Chamfer  = geompy.addToStudy(Chamfer,  "Chamfer on Edge")
  id_Chamfer2 = geompy.addToStudy(Chamfer2, "Chamfer on Faces")
  id_Chamfer3 = geompy.addToStudy(Chamfer3, "Chamfer on Edges")
  id_Chamfer4 = geompy.addToStudy(Chamfer4, "Chamfer on Faces with params D Angle")
  id_MultiTrans1D = geompy.addToStudy(MultiTrans1D, "MultiTrans1D")
  id_MultiTrans2D = geompy.addToStudy(MultiTrans2D, "MultiTrans2D")
  id_MultiRot1Dt  = geompy.addToStudy(MultiRot1Dt,  "MultiRot1D NbTimes")
  id_MultiRot1Ds  = geompy.addToStudy(MultiRot1Ds,  "MultiRot1D ByStep")
  id_MultiRot2Dt  = geompy.addToStudy(MultiRot2Dt,  "MultiRot2D NbTimes")
  id_MultiRot2Ds  = geompy.addToStudy(MultiRot2Ds,  "MultiRot2D ByStep")
  id_CDG       = geompy.addToStudy(CDG,       "CDG")
  id_Archimede = geompy.addToStudy(Archimede, "Archimede")
  id_Partition  = geompy.addToStudy(Partition, "Partition")
  id_Partition1 = geompy.addToStudy(Partition1, "Half Partition")

  
  #Decompose objects
  # SubShape
  SubFace    = geompy.SubShape(Box, geompy.ShapeType["FACE"], [2])
  name       = geompy.SubShapeName(SubFace, Box)
  id_SubFace = geompy.addToStudyInFather(Box, SubFace, name)

  # SubShapeSortedCentres
  SubFaceS   = geompy.SubShapeSortedCentres(Box, geompy.ShapeType["FACE"], [5])
  nameS      = geompy.SubShapeName(SubFaceS, Box)

  id_SubFace = geompy.addToStudyInFather(Box, SubFaceS, nameS)
  # GetExistingSubObjects
  SubObjsAll = geompy.GetExistingSubObjects(Box, True)
  print("For now, Box has the following created sub-objects:", SubObjsAll)
  # GetGroups
  SubGrpsAll = geompy.GetGroups(Box)
  print("For now, Box has the following created groups:", SubGrpsAll)
  # SubShapeAll
  SubEdgeList = geompy.SubShapeAll(SubFace, geompy.ShapeType["EDGE"])
  i=0
  for SubEdge in SubEdgeList :
    name = geompy.SubShapeName(SubEdge, SubFace)
    id_SubEdge = geompy.addToStudyInFather(SubFace, SubEdge, name)
  # SubShapeAllIDs
  SubEdgeIDsList = geompy.SubShapeAllIDs(SubFace, geompy.ShapeType["EDGE"])
  print("IDs of edges of SubFace:", SubEdgeIDsList, "(unsorted)")
  group = geompy.CreateGroup(SubFace, geompy.ShapeType["EDGE"])
  geompy.UnionIDs(group, SubEdgeIDsList)
  geompy.addToStudyInFather(SubFace, group, "Group of all edges")
  # SubShapeAllSortedCentresIDs
  SubEdgeIDsList = geompy.SubShapeAllSortedCentresIDs(SubFace, geompy.ShapeType["EDGE"])
  print("IDs of edges of SubFace:", SubEdgeIDsList, "(sorted)")
  # GetSubShape and GetSubShapeID
  for ind in SubEdgeIDsList:
    edge = geompy.GetSubShape(SubFace, [ind])
    ind_e = geompy.GetSubShapeID(SubFace, edge)
    if ind_e != ind:
      print("Error in GetSubShape or GetSubShapeID")
  # RestoreSubShapes
  geompy.RestoreSubShapes(Copy)
  geompy.RestoreSubShapes(RotatPnt, [], GEOM.FSM_Transformed)
  geompy.RestoreSubShapes(Partition, [Box])
  geompy.RestoreSubShapes(Partition1)

  # GetSubShapeEdgeSorted
  p1 = geompy.GetFirstVertex(Sketcher)
  p2 = geompy.GetFirstVertex(Sketcher3d_1)
  p3 = geompy.GetFirstVertex(Sketcher3d_2)
  geompy.GetSubShapeEdgeSorted(Sketcher, p1, "OrderedEdges")
  geompy.GetSubShapeEdgeSorted(Sketcher3d_1, p2, "OrderedEdges")
  geompy.GetSubShapeEdgeSorted(Sketcher3d_2, p3, "OrderedEdges")

  # GetSubShapesWithTolerance
  geompy.GetSubShapesWithTolerance(Box, GEOM.FACE, GEOM.CC_GT, 1.e-8, "gt")
  geompy.GetSubShapesWithTolerance(Box, GEOM.FACE, GEOM.CC_GE, 1.e-7, "ge")
  geompy.GetSubShapesWithTolerance(Box, GEOM.FACE, GEOM.CC_LT, 2.e-7, "lt")
  geompy.GetSubShapesWithTolerance(Box, GEOM.FACE, GEOM.CC_LE, 1.e-7, "le")

  # MakeExtraction
  geompy.MakeExtraction(Box, [13], "Ext_no_face")
  geompy.MakeExtraction(Box, [18], "Ext_no_edge")
  geompy.MakeExtraction(Box, [16], "Ext_no_vertex")

  # CurvatureOnFace
  Cylinder_1 = geompy.MakeCylinderRH(100, 50, 'Cylinder_r100_h150')
  [Face_1,Face_2,Face_3] = geompy.ExtractShapes(Cylinder_1, geompy.ShapeType["FACE"], True, "Face")
  curvature_1 = geompy.CurvatureOnFace(Face_2, px, vy, 'curvature_cyl_px_vy')
  assert(abs(geompy.BasicProperties(curvature_1)[0] - 100) < 1e-07)
  curvature_zero = geompy.CurvatureOnFace(Face_2, px, vz)
  assert(geompy.MeasuOp.GetErrorCode() == "ZERO_CURVATURE")
  assert(not curvature_zero)
  isExcept = False
  try:
    # p0 is on cylinder axis, projection should fail
    geompy.CurvatureOnFace(Face_2, p0, vy)
  except:
    isExcept = True
  assert(isExcept)
  print("DONE")


GEOM_TestMeasures.py
def TestMeasureOperations (geompy, math):
  p0   = geompy.MakeVertex(0 ,  0,  0)
  p137 = geompy.MakeVertex(10, 30, 70)
  box = geompy.MakeBoxTwoPnt(p0, p137)
  p678 = geompy.MakeVertex(60, 70, 80)
  p789 = geompy.MakeVertex(70, 80, 90)
  vz = geompy.MakeVectorDXDYDZ(0, 0, 1)
  cube = geompy.MakeBoxTwoPnt(p678, p789)
  cylinder = geompy.MakeCylinder(p0, vz, 5, 70)
  ####### PointCoordinates #######

  Coords = geompy.PointCoordinates(p137)
  if Coords[0] != 10 or Coords[1] != 30 or Coords[2] != 70:
    print("Coordinates of p137 must be (10, 30, 70), but returned (", Coords[0], ", ", Coords[1], ", ", Coords[2], ")")
  ####### CheckShape #######

  (IsValid, err) = geompy.CheckShape(box, 0, 2)
  if IsValid == 0:
    geompy.PrintShapeError(box, err)
    raise RuntimeError("Invalid box created")
  else:
    print("\nBox is valid")
  ####### Detect Self-intersections #######

  selfIntersected = geompy.MakeCompound([box, cylinder])
  if geompy.CheckSelfIntersections(selfIntersected):
    raise RuntimeError("Existing self-intersection is not detected")
  ####### Detect Self-intersections fast #######

  if salome_version.getXVersion() > "0x70600":
    if geompy.CheckSelfIntersectionsFast(selfIntersected):
      raise RuntimeError("Existing self-intersection is not detected")
  ####### Fast intersection #######

  if not geompy.FastIntersect(box, cylinder)[0]:
    raise RuntimeError("Existing intersection is not detected")
  ####### WhatIs #######

  Descr = geompy.WhatIs(box)
  print("\nBox 10x30x70 description:")
  print(Descr)
  ####### NbShapes #######
  NbSolids = geompy.NbShapes(box, geompy.ShapeType["SOLID"])
  print("\nBox 10x30x70 quantity of solids:", NbSolids)
  ####### ShapeInfo #######
  BoxInfo = geompy.ShapeInfo(box)
  print("\nBox 10x30x70 shapes:")
  print(BoxInfo)
  ####### BasicProperties #######

  Props = geompy.BasicProperties(box)
  print("\nBox 10x30x70 Basic Properties:")
  print(" Wires length: ", Props[0])
  print(" Surface area: ", Props[1])
  print(" Volume      : ", Props[2])
  dl = math.sqrt((Props[0] -   880)*(Props[0] -   880))
  da = math.sqrt((Props[1] -  6200)*(Props[1] -  6200))
  dv = math.sqrt((Props[2] - 21000)*(Props[2] - 21000))
  #print "|Props[0] - 880| = ", dl
  if dl > 1e-7 or da > 1e-7 or dv > 1e-7:
    print("While must be:")
    print(" Wires length: ", 880)
    print(" Surface area: ", 6200)
    print(" Volume      : ", 21000)
  ####### BoundingBox #######

  BB = geompy.BoundingBox(box)
  print("\nBounding Box of box 10x30x70:")
  print(" Xmin = ", BB[0], ", Xmax = ", BB[1])
  print(" Ymin = ", BB[2], ", Ymax = ", BB[3])
  print(" Zmin = ", BB[4], ", Zmax = ", BB[5])
  BB = geompy.MakeBoundingBox(box)
  geompy.addToStudy(BB, "BoundingBox")
  ####### Inertia #######

  In = geompy.Inertia(box)
  print("\nInertia matrix of box 10x30x70:")
  print(" (", In[0], ", ", In[1], ", ", In[2], ")")
  print(" (", In[3], ", ", In[4], ", ", In[5], ")")
  print(" (", In[6], ", ", In[7], ", ", In[8], ")")
  print("Main moments of inertia of box 10x30x70:")
  print(" Ix = ", In[9], ", Iy = ", In[10], ", Iz = ", In[11])
  ####### Tolerance #######

  Toler = geompy.Tolerance(box)
  print("\nBox 10x30x70 tolerance:")
  print(" Face min. tolerance: ", Toler[0])
  print(" Face max. tolerance: ", Toler[1])
  print(" Edge min. tolerance: ", Toler[2])
  print(" Edge max. tolerance: ", Toler[3])
  print(" Vertex min. tolerance: ", Toler[4])
  print(" Vertex max. tolerance: ", Toler[5])
  ####### MakeCDG #######

  pcdg = geompy.MakeCDG(box)
  if pcdg is None:
    raise RuntimeError("MakeCDG(box) failed")
  else:
    print("\nCentre of gravity of box has been successfully obtained:")
    Coords = geompy.PointCoordinates(pcdg)
    print("(", Coords[0], ", ", Coords[1], ", ", Coords[2], ")")
    if Coords[0] != 5 or Coords[1] != 15 or Coords[2] != 35:
      print("But must be (5, 15, 35)")
  ####### GetNormal #######
  faces = geompy.SubShapeAllSortedCentres(box, geompy.ShapeType["FACE"])
  face0 = faces[0]

  vnorm = geompy.GetNormal(face0)
  if vnorm is None:
    raise RuntimeError("GetNormal(face0) failed")
  else:
    geompy.addToStudy(face0, "Face0")
    geompy.addToStudy(vnorm, "Normale to Face0")
    print("\nNormale of face has been successfully obtained:")
    #Coords = geompy.PointCoordinates(pcdg)
    #print "(", Coords[0], ", ", Coords[1], ", ", Coords[2], ")"
    #if Coords[0] != 5 or Coords[1] != 15 or Coords[2] != 35:
    #  print "But must be (5, 15, 35)"
  ####### MinDistance #######

  MinDist = geompy.MinDistance(box, cube)
  #print "\nMinimal distance between Box and Cube = ", MinDist[0]
  #print "It is reached at points:"
  #print " On Box  (", MinDist[1], ", ", MinDist[2], ", ", MinDist[3], ")"
  #print " On Cube (", MinDist[4], ", ", MinDist[5], ", ", MinDist[6], ")"
  print("\nMinimal distance between Box and Cube = ", MinDist)
  MinDistComps = geompy.MinDistanceComponents(box, cube)
  print("\nMinimal distance between Box and Cube = ", MinDistComps[0])
  print("Its components are  (", MinDistComps[1], ", ", MinDistComps[2], ", ", MinDistComps[3], ")")
  # Get all closest points
  [nbSols, listCoords] = geompy.ClosestPoints(box, cube)
  for i in range(nbSols):
    v1 = geompy.MakeVertex(listCoords[i*6 + 0], listCoords[i*6 + 1], listCoords[i*6 + 2])
    v2 = geompy.MakeVertex(listCoords[i*6 + 3], listCoords[i*6 + 4], listCoords[i*6 + 5])
    geompy.addToStudy(v1, 'MinDist_%d_on_Box'%(i+1))
    geompy.addToStudy(v2, 'MinDist_%d_on_Cube'%(i+1))
    pass
  ####### Angle #######
  OX  = geompy.MakeVectorDXDYDZ(10, 0,0)
  OXY = geompy.MakeVectorDXDYDZ(10,10,0)
  # in one plane

  Angle = geompy.GetAngle(OX, OXY)
  print("\nAngle between OX and OXY = ", Angle)
  if math.fabs(Angle - 45.0) > 1e-05:
    print("  Error: returned angle is", Angle, "while must be 45.0")

  Angle = geompy.GetAngleRadians(OX, OXY)
  print("\nAngle between OX and OXY in radians = ", Angle)
  if math.fabs(Angle - math.pi/4) > 1e-05:
    print("  Error: returned angle is", Angle, "while must be pi/4")
    pass
