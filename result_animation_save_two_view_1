# make_simple_dual_view_script.py
# This script generates a simple, reliable ParaView Python script
# to create a side-by-side animation of two specific result files.

import os

# ---------------------------------------------------------------------------------
# --- USER SETTINGS (EDIT THESE VALUES FOR YOUR ANALYSIS) ---
# ---------------------------------------------------------------------------------

# --- 1. File Paths and Names ---
# Path to the directory containing your .rmed result files
results_path = "C:/Users/DELL/Downloads/v2024/salome_meca/lpbf_run/thinplate"

# Name of the mechanical results file to display in the left view
mech_filename = "mec1.rmed"

# Name of the thermal results file to display in the right view
thermal_filename = "ther1.rmed"

# Directory where the final animation and screenshot will be saved
output_dir = "C:/Users/DELL/Downloads/v2024/salome_meca/lpbf_run/temp"

# Base name for the output files (e.g., "layer1_results" -> layer1_results.png, layer1_results.ogv)
output_base_name = "layer1_comparison"


# --- 2. View 1 (Left - Mechanical) Settings ---
# The full name of the Von Mises stress field in your mechanical file.
# IMPORTANT: This changes with the file number (e.g., 'stress1SIEQ_NOEU', 'stress10SIEQ_NOEU')
mech_field_name = 'stress1SIEQ_NOEU'
mech_component = 'VMIS'
mech_colormap_preset = 'Cool to Warm'
mech_colormap_min = 0.0
mech_colormap_max = 900.0
# Paste the camera block for the left view here
camera_block_view1 = '''
renderView1.CameraPosition = [97.58, 6.54, 11.65]
renderView1.CameraFocalPoint = [0.25, 10.0, 1.25]
renderView1.CameraViewUp = [-0.106, -0.005, 0.994]
renderView1.CameraParallelScale = 25.36
'''

# --- 3. View 2 (Right - Thermal) Settings ---
# The full name of the Temperature field in your thermal file.
# IMPORTANT: This also changes with the file number (e.g., 'resther1TEMP', 'resther10TEMP')
thermal_field_name = 'resther1TEMP'
thermal_colormap_preset = 'Turbo'
thermal_colormap_min = 300.0
thermal_colormap_max = 1605.0
# Paste the camera block for the right view here
camera_block_view2 = '''
renderView2.CameraPosition = [96.83, 2.66, 16.57]
renderView2.CameraFocalPoint = [0.25, 10.0, 1.25]
renderView2.CameraViewUp = [-0.155, 0.018, 0.987]
renderView2.CameraParallelScale = 25.40
'''

# --- 4. Animation and Output Settings ---
# Total resolution for the combined view [width, height]
image_resolution = [1920, 1080]
frame_rate = 10
# Number of time steps INSIDE your .rmed files (e.g., 18 for layer activation)
total_timesteps = 18

# --- END OF USER SETTINGS ---
# ---------------------------------------------------------------------------------


# --- SCRIPT GENERATION LOGIC (DO NOT EDIT BELOW THIS LINE) ---

# Construct full file paths and format them for ParaView
full_mech_path = os.path.join(results_path, mech_filename).replace("\\", "/")
full_thermal_path = os.path.join(results_path, thermal_filename).replace("\\", "/")
output_screenshot_path = os.path.join(output_dir, f"{output_base_name}.png").replace("\\", "/")
output_animation_path = os.path.join(output_dir, f"{output_base_name}.ogv").replace("\\", "/")

# Determine the animation frame window
frame_window = [0, total_timesteps - 1]

# Create the ParaView script content using an f-string
paraview_script_content = f"""
# This script was auto-generated by make_simple_dual_view_script.py
# It will produce a side-by-side animation for:
# Left: {mech_filename} ({mech_field_name})
# Right: {thermal_filename} ({thermal_field_name})
import pvsimple
from pvsimple import *

# --- 1. Initial Scene Setup ---
pvsimple._DisableFirstRenderCameraReset()

# Create the two-view layout
renderView1 = GetActiveViewOrCreate('RenderView')
layout1 = GetLayout()
layout1.SplitHorizontal(0, 0.5)
renderView2 = CreateView('RenderView')
AssignViewToLayout(view=renderView2, layout=layout1, hint=2)

# Set up the animation scene to use data timesteps
animationScene1 = GetAnimationScene()
animationScene1.UpdateAnimationUsingDataTimeSteps()

# --- 2. Load Data ---
# Load mechanical data source
mech_reader = MEDReader(registrationName='{mech_filename}', FileNames=['{full_mech_path}'])

# Load thermal data source
thermal_reader = MEDReader(registrationName='{thermal_filename}', FileNames=['{full_thermal_path}'])

# --- 3. Configure View 1 (Left - Mechanical) ---
SetActiveView(renderView1)
SetActiveSource(mech_reader)
mech_display = Show(mech_reader, renderView1, 'UnstructuredGridRepresentation')
mech_display.Representation = 'Surface'

# Set color by Von Mises Stress
ColorBy(mech_display, ('POINTS', '{mech_field_name}', '{mech_component}'))

# Get the color transfer function (LUT) and set a fixed range
mech_lut = GetColorTransferFunction('{mech_field_name}')
mech_pwf = GetOpacityTransferFunction('{mech_field_name}')
mech_lut.ApplyPreset('{mech_colormap_preset}', True)
mech_lut.RescaleTransferFunction({mech_colormap_min}, {mech_colormap_max})
mech_pwf.RescaleTransferFunction({mech_colormap_min}, {mech_colormap_max})

# Hide the scalar bar (legend) as requested
mech_display.SetScalarBarVisibility(renderView1, False)

# --- 4. Configure View 2 (Right - Thermal) ---
SetActiveView(renderView2)
SetActiveSource(thermal_reader)
thermal_display = Show(thermal_reader, renderView2, 'UnstructuredGridRepresentation')
thermal_display.Representation = 'Surface'

# Set color by Temperature
ColorBy(thermal_display, ('POINTS', '{thermal_field_name}'))

# Get the color transfer function (LUT) and set a fixed range
thermal_lut = GetColorTransferFunction('{thermal_field_name}')
thermal_pwf = GetOpacityTransferFunction('{thermal_field_name}')
thermal_lut.ApplyPreset('{thermal_colormap_preset}', True)
thermal_lut.RescaleTransferFunction({thermal_colormap_min}, {thermal_colormap_max})
thermal_pwf.RescaleTransferFunction({thermal_colormap_min}, {thermal_colormap_max})

# Hide the scalar bar (legend) as requested
thermal_display.SetScalarBarVisibility(renderView2, False)

# --- 5. Finalize Views and Save ---
# Set layout size and camera positions
layout1.SetSize({image_resolution[0]}, {image_resolution[1]})

# Set camera for View 1 (Left)
SetActiveView(renderView1)
{camera_block_view1}

# Set camera for View 2 (Right)
SetActiveView(renderView2)
{camera_block_view2}

# Update both views to ensure everything is rendered
RenderAllViews()

# Save a screenshot of the initial state (first frame)
print('Saving screenshot to: {output_screenshot_path}')
SaveScreenshot('{output_screenshot_path}', layout1, SaveAllViews=1, ImageResolution={image_resolution})

# Save the full animation
print('Saving animation to: {output_animation_path}')
SaveAnimation('{output_animation_path}', layout1, SaveAllViews=1,
    ImageResolution={image_resolution},
    FrameRate={frame_rate},
    FrameWindow={frame_window})

print('\\nParaView script finished successfully!')
"""

# Write the generated script to a file
generated_script_filename = "run_this_in_paraview.py"
try:
    with open(generated_script_filename, "w") as file:
        file.write(paraview_script_content)
    print("-" * 60)
    print(f"Success! A new ParaView script has been created.")
    print(f"File Name: '{generated_script_filename}'")
    print("\nNext Steps:")
    print("1. Open ParaView (or the ParaVis module in Salome-Meca).")
    print(f"2. Go to Tools -> Python Shell.")
    print(f"3. Click 'Run Script' and open '{generated_script_filename}'.")
    print("-" * 60)
except IOError as e:
    print(f"Error: Could not write the file. {e}")
