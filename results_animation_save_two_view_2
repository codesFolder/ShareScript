# make_general_dual_view_script.py (Version 1.1)
# This script generates a GENERALIZED ParaView Python script to automate
# the creation of side-by-side animations for a series of result files (layers).
# FIX: Correctly deletes BOTH data readers in the cleanup step of the loop.

import os

# ---------------------------------------------------------------------------------
# --- USER SETTINGS (CONFIGURE YOUR BATCH ANALYSIS HERE) ---
# ---------------------------------------------------------------------------------

# --- 1. General Settings ---
# Total number of layers (e.g., if you have mec1-mec20, set this to 20)
num_layers = 20

# Path to the directory containing your .rmed result files
results_path = "C:/Users/DELL/Downloads/v2024/salome_meca/lpbf_run/thinplate"

# Directory where the final animations and screenshots will be saved
output_dir = "C:/Users/DELL/Downloads/v2024/salome_meca/lpbf_run/temp"

# Base name for the output files. The layer number will be added automatically.
# (e.g., "layer_comparison" -> layer_comparison_1.png, layer_comparison_2.ogv, etc.)
output_base_name = "layer_comparison"


# --- 2. View Configuration ---
# Choose which result to display in each view from the RESULT_CONFIG library below.
# You can use any combination, e.g., 'VMIS' and 'TEMP', or 'VMIS' and 'DEPL'.
view1_result_type = 'VMIS'  # Left view
view2_result_type = 'TEMP'  # Right view


# --- 3. View 1 (Left) Display Settings ---
view1_colormap_preset = 'Cool to Warm'
view1_colormap_min = 0.0
view1_colormap_max = 900.0
# Paste the camera block for the left view here
camera_block_view1 = '''
renderView1.CameraPosition = [97.58, 6.54, 11.65]
renderView1.CameraFocalPoint = [0.25, 10.0, 1.25]
renderView1.CameraViewUp = [-0.106, -0.005, 0.994]
renderView1.CameraParallelScale = 25.36
'''

# --- 4. View 2 (Right) Display Settings ---
view2_colormap_preset = 'Turbo'
view2_colormap_min = 300.0
view2_colormap_max = 1605.0
# Paste the camera block for the right view here
camera_block_view2 = '''
renderView2.CameraPosition = [96.83, 2.66, 16.57]
renderView2.CameraFocalPoint = [0.25, 10.0, 1.25]
renderView2.CameraViewUp = [-0.155, 0.018, 0.987]
renderView2.CameraParallelScale = 25.40
'''

# --- 5. Animation Settings ---
image_resolution = [1920, 1080]
frame_rate = 10
# Number of time steps INSIDE EACH .rmed file
timesteps_per_file = 18


# --- 6. ADVANCED: Result Configuration Library ---
# This dictionary tells the script how to find and name everything.
# The '{}' in the template will be replaced with the layer number.
RESULT_CONFIG = {
    'VMIS': {
        'file_basename': 'mec',
        'field_name_template': 'stress{}SIEQ_NOEU',
        'component': 'VMIS'
    },
    'TEMP': {
        'file_basename': 'ther',
        'field_name_template': 'resther{}TEMP',
        'component': None  # None for scalar fields
    },
    'DEPL': {
        'file_basename': 'mec',
        'field_name_template': 'resmec{}_DEPL', # Note the underscore
        'component': 'Magnitude'
    },
    # Add other stress components if you need them
    'SXX': {
        'file_basename': 'mec',
        'field_name_template': 'stress{}SIGM_NOEU',
        'component': 'SIXX'
    }
}
# --- END OF USER SETTINGS ---
# ---------------------------------------------------------------------------------


# --- SCRIPT GENERATION LOGIC (DO NOT EDIT BELOW THIS LINE) ---

try:
    config1 = RESULT_CONFIG[view1_result_type]
    config2 = RESULT_CONFIG[view2_result_type]
except KeyError as e:
    print(f"Error: Invalid result type specified: {e}. Please choose from {list(RESULT_CONFIG.keys())}")
    exit()

# --- Part 1: Generate the static setup code for ParaView ---
paraview_setup_code = f"""
# This script was auto-generated by make_general_dual_view_script.py (v1.1)
# It will process {num_layers} layers for a side-by-side comparison of:
# Left: {view1_result_type} ({config1['file_basename']})
# Right: {view2_result_type} ({config2['file_basename']})

import pvsimple
from pvsimple import *

# --- Initial Scene Setup ---
pvsimple._DisableFirstRenderCameraReset()
renderView1 = GetActiveViewOrCreate('RenderView')
layout1 = GetLayout()
layout1.SplitHorizontal(0, 0.5)
renderView2 = CreateView('RenderView')
AssignViewToLayout(view=renderView2, layout=layout1, hint=2)
animationScene1 = GetAnimationScene()
animationScene1.UpdateAnimationUsingDataTimeSteps()

# --- Set Camera Positions (done once) ---
SetActiveView(renderView1)
{camera_block_view1}
SetActiveView(renderView2)
{camera_block_view2}
layout1.SetSize({image_resolution[0]}, {image_resolution[1]})
"""

# --- Part 2: Generate the main processing loop ---
processing_loop_code = ""
for i in range(1, num_layers + 1):
    # --- Define names and paths for the current layer ---
    basename1 = config1['file_basename']
    basename2 = config2['file_basename']
    
    filename1 = f"{basename1}{i}.rmed"
    filename2 = f"{basename2}{i}.rmed"
    
    path1 = os.path.join(results_path, filename1).replace("\\", "/")
    path2 = os.path.join(results_path, filename2).replace("\\", "/")

    # Use templates to create the correct field names for this layer
    field_name1 = config1['field_name_template'].format(i)
    field_name2 = config2['field_name_template'].format(i)
    
    # Create the 'ColorBy' tuple
    color_tuple1 = f"('POINTS', '{field_name1}', '{config1['component']}')" if config1['component'] else f"('POINTS', '{field_name1}')"
    color_tuple2 = f"('POINTS', '{field_name2}', '{config2['component']}')" if config2['component'] else f"('POINTS', '{field_name2}')"

    # Define variable names for readers and displays
    reader_var1, display_var1 = f"reader1_{i}", f"display1_{i}"
    reader_var2, display_var2 = f"reader2_{i}", f"display2_{i}"

    # Output file paths for this layer
    screenshot_path = os.path.join(output_dir, f"{output_base_name}_{i}.png").replace("\\", "/")
    animation_path = os.path.join(output_dir, f"{output_base_name}_{i}.ogv").replace("\\", "/")

    # --- Append the code for this layer to the loop ---
    processing_loop_code += f"""
# --- Processing Layer {i} ---
print(f"--- Starting processing for layer {i} ---")

# --- Load data for this layer ---
{reader_var1} = MEDReader(registrationName='{filename1}', FileNames=['{path1}'])
if '{filename1}' != '{filename2}':
    {reader_var2} = MEDReader(registrationName='{filename2}', FileNames=['{path2}'])
else:
    {reader_var2} = {reader_var1} # Use the same reader if files are identical

# --- Configure View 1 (Left) for this layer ---
SetActiveView(renderView1)
SetActiveSource({reader_var1})
{display_var1} = Show({reader_var1}, renderView1, 'UnstructuredGridRepresentation')
{display_var1}.Representation = 'Surface'
ColorBy({display_var1}, {color_tuple1})
lut1 = GetColorTransferFunction('{field_name1}')
pwf1 = GetOpacityTransferFunction('{field_name1}')
lut1.ApplyPreset('{view1_colormap_preset}', True)
lut1.RescaleTransferFunction({view1_colormap_min}, {view1_colormap_max})
pwf1.RescaleTransferFunction({view1_colormap_min}, {view1_colormap_max})
{display_var1}.SetScalarBarVisibility(renderView1, False)

# --- Configure View 2 (Right) for this layer ---
SetActiveView(renderView2)
SetActiveSource({reader_var2})
{display_var2} = Show({reader_var2}, renderView2, 'UnstructuredGridRepresentation')
{display_var2}.Representation = 'Surface'
ColorBy({display_var2}, {color_tuple2})
lut2 = GetColorTransferFunction('{field_name2}')
pwf2 = GetOpacityTransferFunction('{field_name2}')
lut2.ApplyPreset('{view2_colormap_preset}', True)
lut2.RescaleTransferFunction({view2_colormap_min}, {view2_colormap_max})
pwf2.RescaleTransferFunction({view2_colormap_min}, {view2_colormap_max})
{display_var2}.SetScalarBarVisibility(renderView2, False)

# --- Go to last frame, render, and save outputs for this layer ---
animationScene1.GoToLast()
RenderAllViews()

print(f"Saving screenshot to: {screenshot_path}")
SaveScreenshot('{screenshot_path}', layout1, SaveAllViews=1, ImageResolution={image_resolution})

print(f"Saving animation to: {animation_path}")
SaveAnimation('{animation_path}', layout1, SaveAllViews=1,
    ImageResolution={image_resolution},
    FrameRate={frame_rate},
    FrameWindow=[0, {timesteps_per_file - 1}])

# --- Cleanup for next iteration ---
# ** CORRECTED LOGIC **
# This is crucial to prevent ParaView from running out of memory
Delete({reader_var1})
del {reader_var1}
if '{filename1}' != '{filename2}':
    Delete({reader_var2})
    del {reader_var2}

"""

# --- Part 3: Combine all parts and write the final script ---
final_script_content = paraview_setup_code + processing_loop_code + "\nprint('\\n--- Batch processing finished successfully! ---')\n"

generated_script_filename = "run_this_in_paraview_GENERALIZED.py"
try:
    with open(generated_script_filename, "w") as file:
        file.write(final_script_content)
    print("-" * 60)
    print("Success! A new GENERALIZED ParaView script has been created.")
    print(f"File Name: '{generated_script_filename}'")
    print("\nThis script will process {num_layers} layers, creating a separate animation and screenshot for each.")
    print("\nNext Steps:")
    print("1. Open ParaView (or the ParaVis module in Salome-Meca).")
    print(f"2. Go to Tools -> Python Shell.")
    print(f"3. Click 'Run Script' and open '{generated_script_filename}'.")
    print("-" * 60)
except IOError as e:
    print(f"Error: Could not write the file. {e}")
